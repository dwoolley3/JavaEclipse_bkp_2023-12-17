package topcoder;



public class SRM741_Div1_L1_DigitStringDiv1
{
	//See Kriii's solution
	public long count(String S, int X)
	{
		int lenS = S.length();
		@SuppressWarnings("unused")
		int lenX = (X+"").length();
		long ans = (1L << lenS) - 1;
		long totSmaller = 0;
		for (int i = 1; i < lenS; i++) {
			long tot = nCk(lenS, i);
			if (S.charAt(i-1) != '0')
				totSmaller += tot;
		}
		ans -= totSmaller;
		
		totSmaller = 0;

//		for (int j = 0; j <= lenS - lenX; j++) 
//			if (S.charAt(j) <= (X+"").charAt(0)) {
//				long tot = nCk(lenS - 1 - j, lenX - 1);
//				totSmaller += tot;
//			}
//		ans -= totSmaller;
		
		return ans;
	}
	
	long nCk(int n, int k) {
		long ans = 1;
		if (n > 0 && k > 0)
			for (int i = n; i >= n-k; i--)
				ans = ans * i / (n-i +1);
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, int p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + p1);
		System.out.println("]");
		SRM741_Div1_L1_DigitStringDiv1 obj;
		long answer;
		obj = new SRM741_Div1_L1_DigitStringDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		long p2;
		
		// ----- test 0 -----
		p0 = "0";
		p1 = 1;
		p2 = 0L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "101";
		p1 = 9;
		p2 = 3L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "471";
		p1 = 47;
		p2 = 2L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "2222";
		p1 = 97;
		p2 = 5L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "0000000000000000000000000000000000000000000100";
		p1 = 1;
		p2 = 3L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
