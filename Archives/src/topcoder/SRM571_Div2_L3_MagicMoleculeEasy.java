package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;

//Does not work for all cases!

public class SRM571_Div2_L3_MagicMoleculeEasy
{
	public int maxMagicPower(int[] magicPower, String[] magicBond, int k)
	{
	    // 50 C 14 = 43 million
	    int[] a = new int[50];
	    int n = magicPower.length;
	    int max = 0;
	    for (int i = 0; i < n; i++)
	        for (int j = 0; j < n; j++)
	            if (magicBond[i].charAt(j) == 'Y')
	            {
	                a[i]++; a[j]++;
	                if (a[i] > max) max = a[i];
	                if (a[j] > max) max = a[j];
	            }
	
	    ArrayList<Integer> bL = new ArrayList<Integer>();
	    for (int i = 0; i < n; i++)
	        if (a[i] == max) bL.add(i);
	
	    int nb = bL.size();
	    int[] b = new int[nb];
	    for (int i = 0; i < nb; i++) b[i] = bL.get(i);
	
	    int maxMP = -1;
	    for (int i = 0; i < (1 << nb); i++)
	    {
	        if (CountOfOnes(i) != k) continue;
	        int sum = 0;
	        int ki = i;
	        for (int j = 0; j < nb; j++)
	        {
	            if (ki % 2 == 1) sum += magicPower[b[j]];
	            ki /= 2;
	        }
	        maxMP = Math.max(sum, maxMP);
	    }
	
	    return maxMP;
	    
	}
	private static int CountOfOnes(int num)
	{
	    int cnt = 0;
	    while (num > 0)
	    {
	        cnt += num % 2;
	        num /= 2;
	    }
	    return cnt;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, String[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		SRM571_Div2_L3_MagicMoleculeEasy obj;
		int answer;
		obj = new SRM571_Div2_L3_MagicMoleculeEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.maxMagicPower(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String[] p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{1,2};
		p1 = new String[]{"NY","YN"};
		p2 = 1;
		p3 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{100,1,100};
		p1 = new String[]{"NYN","YNY","NYN"};
		p2 = 1;
		p3 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{100,1,100};
		p1 = new String[]{"NYN","YNY","NYN"};
		p2 = 2;
		p3 = 200;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{4,7,5,8};
		p1 = new String[]{"NYNY","YNYN","NYNY","YNYN"};
		p2 = 2;
		p3 = 15;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{46474,60848,98282,58073,42670,50373};
		p1 = new String[]{"NYNNNY","YNNYNY","NNNYYY","NYYNNN","NNYNNN","YYYNNN"};
		p2 = 3;
		p3 = 209503;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1,1,1,1,1,1,1,1,1,1,1,1,1};
		p1 = new String[]{"NNYYYNYYNYNNY","NNYNYYYYYYYNY","YYNYYNYYYYYYY","YNYNYYNYYYYYY","YYYYNNYYYYYNY","NYNYNNYYYYYNN","YYYNYYNYYYYYY","YYYYYYYNYNYYY","NYYYYYYYNYYYY","YYYYYYYNYNNNN","NYYYYYYYYNNYN","NNYYNNYYYNYNN","YYYYYNYYYNNNN"};
		p2 = 9;
		p3 = -1;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{1,1};
		p1 = new String[]{"NN","NN"};
		p2 = 1;
		p3 = 1;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = new int[]{1,1,2,5,2,4,2};
		p1 = new String[]{"NNNNNNN","NNYNNNN","NYNNNYN","NNNNNNY","NNNNNNN","NNYNNNN","NNNYNNN"};
		p2 = 3;
		p3 = 11;
		all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
