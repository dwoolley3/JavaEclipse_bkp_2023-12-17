package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM789_Div2_L2_StringsBetween
{
	public long count(int L, String A, String B)
	{
		if (L == 0) return 0;
		return count(L, B) - count(L, A) - 1;
	}
	
	private long count(int L, String A) {
		long tot = 0;
		long[] a = new long[100];
		a[0] = 1;
		for (int c = 1; c < 98; c++) a[c] = a[c-1] * 26;
		for (int c = 1; c < 98; c++) a[c] += a[c-1];
		
		int len = A.length();
		for (int i = len-1; i >= 0; i--) {
			tot += (A.charAt(i) - 'a') * a[L-i-1] + 1;
		}
		return tot;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, String p1, String p2, boolean hasAnswer, long p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "\"" + p1 + "\"" + "," + "\"" + p2 + "\"");
		System.out.println("]");
		SRM789_Div2_L2_StringsBetween obj;
		long answer;
		obj = new SRM789_Div2_L2_StringsBetween();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		String p1;
		String p2;
		long p3;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = "";
		p2 = "d";
		p3 = 3L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = "ay";
		p2 = "c";
		p3 = 28L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 2;
		p1 = "ay";
		p2 = "cb";
		p3 = 30L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10;
		p1 = "bulldog";
		p2 = "bulldozers";
		p3 = 350592L;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 4;
		p1 = "bx";
		p2 = "fad";
		p3 = 57028L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 4;
		p1 = "pier";
		p2 = "pies";
		p3 = 0L;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 10;
		p1 = "";
		p2 = "zzzzzzzzzz";
		p3 = 146813779479509L;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
