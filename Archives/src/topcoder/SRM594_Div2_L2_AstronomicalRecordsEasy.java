package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM594_Div2_L2_AstronomicalRecordsEasy
{
	public int minimalPlanets(int[] A, int[] B)
	{
        int na = A.length;
        int nb = B.length;
        int[] a = new int[na];
        int[] b = new int[nb];

        int min = na + nb;
        for (int i = 0; i < na; i++)
        {
            for (int j = 0; j < nb; j++)
            {
                ArrayList<Integer> nums = new ArrayList<Integer>();
                for (int k = 0; k < na; k++)
                {
                    a[k] = A[k] * B[j];
                    nums.add(a[k]);
                }
                for (int k = 0; k < nb; k++)
                {
                    b[k] = B[k] * A[i];
                    if (!nums.contains(b[k])) nums.add(b[k]);
                }
                int cnt = nums.size();
                if (cnt < min) min = cnt;
            }
        }
        return min;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM594_Div2_L2_AstronomicalRecordsEasy obj;
		int answer;
		obj = new SRM594_Div2_L2_AstronomicalRecordsEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.minimalPlanets(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{1,2,3,4};
		p1 = new int[]{2,3,4,5};
		p2 = 5;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,2,3,4};
		p1 = new int[]{2,4,6,8};
		p2 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,2,3,5,6,8,9};
		p1 = new int[]{2,4,5,6,7,8,9};
		p2 = 9;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3,4};
		p1 = new int[]{6,7,8,9};
		p2 = 6;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{200,500};
		p1 = new int[]{100,200,300,400,600,700,800,900};
		p2 = 9;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1,2,3,4,5,6,7,8,9,10,11,12};
		p1 = new int[]{6,7,8,9,10,11,12,13,14,15};
		p2 = 15;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
