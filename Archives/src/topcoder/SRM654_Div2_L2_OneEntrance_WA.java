package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM654_Div2_L2_OneEntrance_WA
{
	boolean[] used;
	boolean[] placed;
	ArrayList<Integer>[] g;
	
	@SuppressWarnings("unchecked")
	public int count(int[] a, int[] b, int s)
	{
		int n = a.length;
		int[] per = generateInitialPermutation(n);
			
		g = new ArrayList[n+1];
		for (int i = 0; i <= n; ++i) 
			g[i] = new ArrayList<Integer>();
		for (int i = 0; i < n; i++)
		{
			g[a[i]].add(b[i]);
			g[b[i]].add(a[i]);
		}
		
		int cnt = 0;
		do {

			placed = new boolean[n];
			for (int i = 0; i < n; i++)
			{
				used = new boolean[n];
				int searchFor = (per[i] >= s) ? per[i] + 1 : per[i];
				dfs(s, searchFor);
			}
			boolean ok = true;
			for (int i = 0; i < n; ++i) 
				ok = ok && placed[i]; 
				
			if (ok) 
				cnt++;	
		} while (next_permutation(per));  //next in lexicographical order
	
		return cnt;
	}
	
	private void dfs(int v, int searchFor) 
	{
		if (searchFor == v) 
		{
			placed[v] = true;
			return;
		}
		used[v] = true;
		for (int i = 0; i < g[v].size(); i++)
		{
			int y = g[v].get(i);
			if (searchFor == y) 
			{
				placed[v] = true;
				return;
			}
			if (!used[y] && !placed[y]) 
				dfs(y, searchFor);			
		}
	}
	
	public int[] generateInitialPermutation(int size)
	{
		int[] p = new int[size];
		for (int i = 0; i < size; i++) p[i] = i;
		return p;
	}
	
	public boolean next_permutation(int[] p) 
	{
		// 0,1,2 -> 0,2,1 -> 1,0,2 -> 1,2,0 -> 2,0,1 -> 2,1,0
		int t, n = p.length;
		for (int i = n - 2; i >= 0; i--)
		    if (p[i] < p[i + 1])
		    	for (int j = n - 1;; j--)
		    		if (p[j] > p[i]) 
		    		{
		    			t = p[i]; p[i] = p[j];  p[j] = t;
				        for (i++, j = n - 1; i < j; i++, j--) 
				        {
				        	t = p[i]; p[i] = p[j]; p[j] = t;
				        }
				        return true;
		    		}
		 return false;  //p is last lexicographically, e.g. -> 2, 1, 0
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		SRM654_Div2_L2_OneEntrance_WA obj;
		int answer;
		obj = new SRM654_Div2_L2_OneEntrance_WA();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{0,1,2};
		p1 = new int[]{1,2,3};
		p2 = 0;
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{0,1,2};
		p1 = new int[]{1,2,3};
		p2 = 2;
		p3 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,0,0,0};
		p1 = new int[]{1,2,3,4};
		p2 = 0;
		p3 = 24;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{7,4,1,0,1,1,6,0};
		p1 = new int[]{6,6,2,5,0,3,8,4};
		p2 = 4;
		p3 = 896;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{};
		p1 = new int[]{};
		p2 = 0;
		p3 = 1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
