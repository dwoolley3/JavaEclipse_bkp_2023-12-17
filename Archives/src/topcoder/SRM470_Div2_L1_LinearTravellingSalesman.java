package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM470_Div2_L1_LinearTravellingSalesman
{
	public int findMinimumDistance(int[] x, int[] y)
	{
        int n = x.length;
        int xmin = Integer.MAX_VALUE, ymin = Integer.MAX_VALUE;
        int xmax = Integer.MIN_VALUE, ymax = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++)
        {
            xmin = Math.min(x[i], xmin);
            ymin = Math.min(y[i], ymin);
            xmax = Math.max(x[i], xmax);
            ymax = Math.max(y[i], ymax);
        }
        return (xmax - xmin) + (ymax - ymin);
        
        //Alternative solution:
//        Array.Sort(x);
//        Array.Sort(y);
//        return (x[n-1] - x[0]) + (y[n-1] - y[0]);
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM470_Div2_L1_LinearTravellingSalesman obj;
		int answer;
		obj = new SRM470_Div2_L1_LinearTravellingSalesman();
		long startTime = System.currentTimeMillis();
		answer = obj.findMinimumDistance(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{1,3,5};
		p1 = new int[]{2,2,2};
		p2 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{3,2,1};
		p1 = new int[]{3,2,1};
		p2 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,100,1000,10000};
		p1 = new int[]{0,10,100,1000};
		p2 = 11000;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{80,60,70,50};
		p1 = new int[]{50,70,60,80};
		p2 = 60;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{7,7,7,7,7,7,7};
		p1 = new int[]{105,1231,5663,295,3062,380,7777};
		p2 = 7672;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
