import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class ts_hm_SRM672_Div1_L1_Procrastination
{
	public long findFinalAssignee(long n)
	{
		HashMap<Long,TreeSet<Long>> hm = new HashMap<Long,TreeSet<Long>>();
		ArrayList<Long> al;
		long t = 2;
			
		while (true)
		{
			TreeSet<Long> ts = new TreeSet<Long>();
			if (hm.get(n) != null)
				ts = hm.get(n);
			else
			{
				al = getFactors(n-1);
				for (long f : al) ts.add(f);		
				al = getFactors(n);
				for (long f : al) ts.add(f);
				hm.put(n, ts);
			}
			
			if (ts.ceiling(t) == null) break;
			t = ts.ceiling(t);
			//System.out.println(t + " " + n);
			if ((n-1) % t == 0)
				n--;
			else if (n % t == 0)
				n++;
			t++;
		}		
		return n;
	}
	
	private ArrayList<Long> getFactors(long n)
	{
		ArrayList<Long> al = new ArrayList<Long>();
		for (long i = 2; i * i <= n; i++)
			if (n % i == 0)
			{
				al.add((long)i);
				al.add(n/i);
			}
		return al;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, long p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		ts_hm_SRM672_Div1_L1_Procrastination obj;
		long answer;
		obj = new ts_hm_SRM672_Div1_L1_Procrastination();
		long startTime = System.currentTimeMillis();
		answer = obj.findFinalAssignee(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		long p0;
		long p1;
		
		// ----- test 0 -----
		p0 = 10000000000L;
		p1 = 10000000003L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 16L;
		p1 = 14L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
	
		// ----- test 0 -----
		p0 = 2L;
		p1 = 2L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 3L;
		p1 = 3L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 8L;
		p1 = 11L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 20L;
		p1 = 20L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 196248L;
		p1 = 196259L;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 5587021440L;
		p1 = 5587021440L;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
