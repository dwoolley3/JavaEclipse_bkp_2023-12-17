package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class TCO2012_R1A_L1_EllysJuice
{
	public void p(Object ...o) {System.out.println(Arrays.deepToString(o));}
	
	public String[] getWinners(String[] players)
	{
        TreeMap<String, Integer> d = new  TreeMap<String, Integer>();
        Arrays.sort(players);
        //p(players);
        
        for (String pl : players)
        {
            if (!d.containsKey(pl))
                d.put(pl, 1);
            else
                d.put(pl, d.get(pl) + 1);
        }
        ArrayList<String> p = new ArrayList<String>();
        
        if (d.size() == 1)
        	p.add(players[0]);
        else
        {
            for (String s : d.keySet())
                if (d.get(s) > 1)
                    p.add(s);
        }
        return p.toArray(new String[0]);
//        String[] st = new String[p.size()];
//        int j = 0;
//        for (String s : p) st[j++] = s;
//        return st;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		TCO2012_R1A_L1_EllysJuice obj;
		String[] answer;
		obj = new TCO2012_R1A_L1_EllysJuice();
		long startTime = System.currentTimeMillis();
		answer = obj.getWinners(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		
		// ----- test 0 -----
		p0 = new String[]{"elly","kriss","stancho","elly","stancho"};
		p1 = new String[]{"elly","stancho"};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"torb","elly","stancho","kriss"};
		p1 = new String[]{};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"elly","elly","elly","elly","elly"};
		p1 = new String[]{"elly"};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"ariadne","elly","ariadne","stancho","stancho","kriss","stancho","elly"};
		p1 = new String[]{"ariadne","elly","stancho"};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
