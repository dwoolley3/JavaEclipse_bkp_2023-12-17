package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM601_Div2_L3_WinterAndReindeers
{
	public int getNumber(String[] allA, String[] allB, String[] allC)
	{
		//Does not work in all system test cases
		StringBuilder A = new StringBuilder();
		StringBuilder B = new StringBuilder();
		StringBuilder C = new StringBuilder();
		for (String st : allA) A.append(st);
		for (String st : allB) B.append(st);
		for (String st : allC) C.append(st);
		
		int cnt = 0, max = 0;
		int lenA = A.length(), lenB = B.length(), lenC = C.length();
		
		int startA = -1, startB = 0, inc = 0;
		while (startA < lenA && startB < lenB)
		{			
			if (inc % 2 == 0) startA++; else startB++;
			inc++;
		
			int i = startA, ci = 0, stA = -1, enA = -1;		
			for (ci = 0; ci < lenC && i < lenA; ci++)
			{
				while (i < lenA && A.charAt(i) != C.charAt(ci)) i++;
				if (ci == 0) stA = i;
			}
			if (i < lenA) enA = i;
			
			i = startB; ci = 0;
			int stB = -1, enB = -1;
			for (ci = 0; ci < lenC && i < lenB; ci++)
			{
				while (i < lenB && B.charAt(i) != C.charAt(ci)) i++;
				if (ci == 0) stB = i;
			}
			if (i < lenB) enB = i;
	
			if (enA > -1 && enB > -1)
			{
				int beg = 0, stk = 0;
				for (int j = 0; j < stA; j++)
				{
					for (int k = stk; k < stB; k++)
						if (A.charAt(j) == B.charAt(k))
						{
							beg++; stk=k+1; break;
						}
				}
				
				int last = 0; stk = enB+1;
				for (int j = enA+1; j < lenA; j++)
				{
					for (int k = stk; k < lenB; k++)
						if (A.charAt(j) == B.charAt(k))
						{
							last++; stk=k+1; break;
						}
				}
				
				cnt = beg + lenC + last;
				max = Math.max(max,  cnt);
			}
			System.out.println(stA + " " + enA + " " + stB + " " + enB);
		}
		return max;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, String[] p1, String[] p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p2[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		SRM601_Div2_L3_WinterAndReindeers obj;
		int answer;
		obj = new SRM601_Div2_L3_WinterAndReindeers();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		String[] p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new String[]{"X"};
		p1 = new String[]{"X","Y"};
		p2 = new String[]{"X"};
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"ABCXD"};
		p1 = new String[]{"BCDEF"};
		p2 = new String[]{"CD"};
		p3 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"WE","LOVE"};
		p1 = new String[]{"WORKING","FOR","SANTA"};
		p2 = new String[]{"JK"};
		p3 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"ABCDE"};
		p1 = new String[]{"CDEAB"};
		p2 = new String[]{"B"};
		p3 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"ABCABDEGAXAHDJBAAHFJDXBB","ABHFHCDALFDJDBBA","BABBAXAXXX"};
		p1 = new String[]{"ABLOCBAXBAHAJDXBIJKA","JBABCDAHKFIUDALPJAH","AABACX"};
		p2 = new String[]{"AXBADXBBAB","CDD"};
		p3 = 23;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
