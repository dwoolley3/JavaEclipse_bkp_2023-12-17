package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM693_Div1_L1_BiconnectedDiv1_dp
{
	public int minimize(int[] w1, int[] w2)
	{
		//Petr's solution
		final int INF = (int)1e9;
		int n = w1.length +1;
		int[][] best = new int[n-2][2];
		for (int[] x : best) Arrays.fill(x, -INF);
		best[0][1] = 0;
		for (int i = 1; i < n-2; i++) {
			best[i][0] = best[i-1][1] + w2[i];
			best[i][1] = Math.max(best[i-1][0], best[i-1][1] + w1[i]);
		}
		int res = 0;
		for (int x : w1) res += x;
		for (int x : w2) res += x;
		res -= best[n-3][1];
				
		return res;
		
//		final int INF = (int)1e8;
//		int n = w1.length+1;
//		int[][] dp = new int[n][2];
//		for (int i = 0; i < n; i++) {
//			Arrays.fill(dp[i],  INF);
//		}
//		dp[0][0] = 0;
//		for (int i = 0; i < n-1; i++) {
//			for (int j = 0; j <=1 ; j++) {
//				if (dp[i][j] == INF) {
//					continue;
//				}
//				int now = dp[i][j];
//				if (j == 0) {
//					if (i < w2.length) {
//						dp[i+1][1] = Math.min(dp[i+1][1],  now+w1[i]+w2[i]);
//					}					
//				}
//				else {
//					dp[i+1][0] = Math.min(dp[i+1][0], now + w1[i]);
//					if (i < w2.length) {
//						dp[i+1][1] = Math.min(dp[i+1][1],  now + w2[i]);
//					}
//				}
//			}
//		}
//		return dp[n-1][0];
		
		
//		final int INF = Integer.MAX_VALUE / 3;
//		int n = w1.length ;
//		int dpHave = w1[0] + w2[0];
//		int dpNot = INF;
//		for (int i = 1; i < n-1; i++) {
//			int newHave = INF;
//			int newNot = INF;
//			newHave = Math.min(newHave,  dpHave + w2[i]);
//			newNot = Math.min(newNot,  dpHave + w1[i]);
//			newHave = Math.min(newHave,  dpNot + w1[i] + w2[i]);
//			dpHave = newHave;
//			dpNot = newNot;
//		}
//		return dpHave + w1[n-1];
		

		
//		int n = w1.length;
//		int sum = 0;
//		for (int i = 0; i < n; i++) sum += w1[i];
//		for (int i = 0; i < n-1; i++) sum += w2[i];
//				
//		return sum;
		
//		n = 100;
//		for (int i = 0; i < n-1; i++)
//			System.out.print((int) (Math.random()*10001) + ",");
//		System.out.println();
//		for (int i = 0; i < n-2; i++)
//			System.out.print((int) (Math.random()*10001) + ",");
//		System.out.println();
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM693_Div1_L1_BiconnectedDiv1_dp obj;
		int answer;
		obj = new SRM693_Div1_L1_BiconnectedDiv1_dp();
		long startTime = System.currentTimeMillis();
		answer = obj.minimize(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{1,2};
		p1 = new int[]{3};
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{3,0,4};
		p1 = new int[]{1,2};
		p2 = 10;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{3,3,3,3};
		p1 = new int[]{3,6,3};
		p2 = 18;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{7243,7525,8467,6351,9453,8456,8175,5874,6869,7400,6438,8926,6876};
		p1 = new int[]{2642,1743,3546,4100,2788,3019,2678,1935,1790,2674,3775,1920};
		p2 = 46729;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		
		// ----- test 4 -----
		p0 = new int[]{6663,8556,0,4859,4945,3833,8807,8689,3379,2395,3554,2741,31,4860,841,3221,9141,1602,6501,436,2841,3615,1221,2363,6922,9843,7399,3206,9607,7703,8469,2106,9569,4211,7805,6750,4363,6139,6952,1588,3320,9006,8432,602,9548,6317,6669,114,4159,2457,1644,8013,2092,4894,3865,1939,2957,3966,5897,481,2242,1389,5311,8223,7899,1883,6198,7614,4829,5777,1607,8075,5154,4366,7219,5458,5218,3870,7370,3098,1291,8364,8140,8987,4663,6787,8637,2353,3378,4257,833,6886,2293,3278,357,7142,5281,6196,5493};
		p1 = new int[]{9328,3458,6212,9308,0,1114,681,305,1873,6653,7004,293,5127,9326,8418,4264,1175,3761,4280,5983,8666,3401,6981,4737,661,827,5568,3221,2440,7643,4350,3873,6828,9107,3291,1190,8860,9032,5823,467,9347,8590,8875,9251,9932,8615,9372,6370,620,8757,1230,4822,4454,8418,6966,9054,2959,3769,8430,4159,351,2358,1911,4436,4054,1835,3845,1365,4063,2116,4739,6552,3889,973,540,3508,1405,1466,2676,3188,8776,5894,217,2173,6816,5024,259,9078,665,3234,5490,4320,399,9900,1101,751,2402,4874};
		p2 = 422494;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{6792,0,4680,1229,3371,9659,2089,1551,7689,9282,5490,5054,4024,2641,2212,1502,4898,5266,3887,4538,9306,1381,1716,1369,1803,8489,8537,7988,1590,4918,1668,9083,6740,5611,459,9656,5077,1819,7690,954,9863,3732,4557,6810,5386,1142,4812,7713,4862,6164,4842,9034,600,3752,2928,6691,4336,325,2777,8242,3788,8117,3495,9914,94,3091,632,386,9538,7181,660,291,2193,1460,4294,2329,9556,5409,2468,667,2978,8885,2412,9862,4865,7619,315,2920,4940,115,1329,5332,4633,3675,7321,6877,3658,9917};
		p1 = new int[]{5887,4178,5686,8765,0,9627,3496,3091,5768,7191,6764,275,1233,5258,9017,7891,8672,9710,2983,1913,323,5837,5013,3235,8627,5886,2615,8827,5501,5735,8101,3586,377,8085,9257,1640,8598,3652,8801,3925,2745,6352,7944,2237,8217,3201,5837,8642,947,4797,5856,3100,9549,7592,1779,1500,6346,4917,1715,883,1798,9734,5345,8600,4606,8416,475,7364,5448,1530,8251,8741,5743,4544,2408,3454,4075,8652,6937,8115,2021,9513,8187,4421,7963,9592,2033,8732,2208,8002,4066,6998,9225,274,905,2495,3125};
		p2 = 475151;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{9999,7665,756,8665,46,5722,2648,2192,8402,4400,8982,5433,3240,2993,7461,5614,5321,8388,4896,6969,9581,6582,5507,2813,2245,9342,4525,7660,6749,8076,6602,4688,9386,8895,7357,2774,2687,1191,4244,7739,5672,7090,9859,4439,5297,598,6759,9941,2746,3440,7974,3084,1475,9161,1427,2494,1363,8360,9730,3297,4754,5646,8982,2649,5700,3299,1582,5542,3287,7487,8340,5297,3587,399,4650,7669,2452,5658,3980,3521,3174,4983,9439,2687,8827,1238,822,813,9024,6709,225,1718,4781,5738,4004,139,3156,7708,2706};
		p1 = new int[]{9999,5474,9747,3440,7551,9042,8516,1056,5044,2477,6981,5540,546,9060,5130,3024,7894,807,3307,6969,3873,8416,3009,4209,2262,8617,2797,7835,7955,1046,6329,5131,7165,1303,5393,4193,7663,5495,3330,7255,2480,4293,3255,2232,1596,1288,1056,6569,8736,1252,5361,9040,4603,8810,5325,5883,3644,6998,2421,7333,8699,8176,4236,9454,6843,6851,6686,4016,104,5130,6048,6084,6778,6694,3718,4978,2596,4466,4730,9322,6184,501,5689,980,9850,3966,9030,5898,5098,4582,8283,2047,1981,4392,3354,6033,2854,305};
		p2 = 472802;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
