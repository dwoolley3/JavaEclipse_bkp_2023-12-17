package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM818_Div2_L2_EqualPiles
{
	public int equalize(int N, int M, int T)
	{
		int[] b = new int[N];
		HashMap<Integer,Integer> hm = new HashMap<>();
		for (int i = 0; i < N; i++) {
			b[i] = 1 + (int)((1L*i*i) % M);
			int c = 0;
			if (hm.get(b[i]) != null) {
				c = hm.get(b[i]);
			}
			hm.put(b[i], c+1);
		}
		Arrays.sort(b);
		int max = 1, sum = 0, rest = 0, same = 0, bag = 0;
		for (int i = 0; i < N; i++) {
			bag = hm.get(b[i]);
			sum += bag;
			rest = N - sum;
			same = bag + Math.min(rest, T);
			max = Math.max(max, same);	
			i += (bag - 1);
		}
		
		return max;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		SRM818_Div2_L2_EqualPiles obj;
		int answer;
		obj = new SRM818_Div2_L2_EqualPiles();
		long startTime = System.currentTimeMillis();
		answer = obj.equalize(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 10;
		p1 = 12345678;
		p2 = 0;
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = 1;
		p2 = 0;
		p3 = 10;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 10;
		p1 = 12345678;
		p2 = 3;
		p3 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10;
		p1 = 10;
		p2 = 4;
		p3 = 6;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100000;
		p1 = 7;
		p2 = 0;
		p3 = 28572;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 100000;
		p1 = 7;
		p2 = 1;
		p3 = 28573;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 100000;
		p1 = 7;
		p2 = 98765;
		p3 = 100000;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = 5;
		p1 = 5;
		p2 = 5;
		p3 = 5;
		all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
