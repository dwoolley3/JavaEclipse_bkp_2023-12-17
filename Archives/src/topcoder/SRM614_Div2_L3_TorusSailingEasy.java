package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM614_Div2_L3_TorusSailingEasy
{
	public double expectedTime(int N, int M, int goalX, int goalY)
	{
		int posx = 0, posy = 0;

		int i = 0;
		for (i = 0; i < N*M; i++)
		{
			posx++; posy++;
			posx %= N; posy %= M;
			if (posx == N) posx = 0;
			if (posy == M) posy = 0;
			if (posx == goalX && posy == goalY)
				break;
		}
		if (i == N*M) return -1.0;
		int d1 = i + 1;
		
		posx = 0; posy = 0;
		i = 0;
		for (i = 0; i < N*M; i++)
		{
			posx--; posy--;
			if (posx < 0) posx = N - 1;
			if (posy < 0) posy = M - 1;
			if (posx == goalX && posy == goalY)
				break;
		}
		if (i == N*M) return -1.0;
		int d2 = i + 1;
		
		//System.out.println(d1 + " " + d2);
		return d1*d2;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, double p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		SRM614_Div2_L3_TorusSailingEasy obj;
		double answer;
		obj = new SRM614_Div2_L3_TorusSailingEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.expectedTime(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		double p4;
		
		// ----- test 0 -----
		p0 = 10;
		p1 = 9;
		p2 = 1;
		p3 = 2;
		p4 = 869.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 9;
		p1 = 5;
		p2 = 1;
		p3 = 2;
		p4 = 296.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 10;
		p1 = 8;
		p2 = 1;
		p3 = 2;
		p4 = -1.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 2;
		p2 = 1;
		p3 = 1;
		p4 = 1.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = 2;
		p2 = 0;
		p3 = 1;
		p4 = -1.0D;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = 3;
		p2 = 1;
		p3 = 1;
		p4 = 2.0D;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 4;
		p1 = 6;
		p2 = 1;
		p3 = 3;
		p4 = 27.0D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
