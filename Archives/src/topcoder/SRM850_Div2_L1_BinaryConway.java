//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;
package topcoder;

public class SRM850_Div2_L1_BinaryConway
{
	public String say(String term)
	{
		String ans = "";
		int n = term.length();
		char c = term.charAt(0);
		char lastc;
		int cnt = 1;
		for (int i = 1; i < n; i++) {
			lastc = c;
			c = term.charAt(i);			
			if (c != lastc) {
				String bin = "";
				while (cnt > 0) {
					bin = "" + (cnt % 2) + bin;
					cnt /= 2;
				}
				bin += lastc;
				ans += bin;
				cnt = 0;
			}
			cnt++;
		}
		String bin = "";
		while (cnt > 0) {
			bin = "" + (cnt % 2) + bin;
			cnt /= 2;
		}
		bin += c;
		ans += bin;
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		SRM850_Div2_L1_BinaryConway obj;
		String answer;
		obj = new SRM850_Div2_L1_BinaryConway();
		long startTime = System.currentTimeMillis();
		answer = obj.say(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		
		// ----- test 0 -----
		p0 = "1";
		p1 = "11";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "11";
		p1 = "101";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "101";
		p1 = "111011";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "111011";
		p1 = "11110101";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "11110101";
		p1 = "100110111011";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "1111111";
		p1 = "1111";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = "1111111100000000";
		p1 = "1000110000";
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = "0";
		p1 = "10";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
