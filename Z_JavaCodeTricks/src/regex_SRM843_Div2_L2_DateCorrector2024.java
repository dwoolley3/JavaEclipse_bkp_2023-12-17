//import java.util.*;
import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class regex_SRM843_Div2_L2_DateCorrector2024
{
	//YYYY-MM-DD, DD.MM.YYYY, MM/DD/YYYY
	private static Pattern DATE_PATTERN1 = Pattern.compile("^\\d{4}-\\d{2}-\\d{2}$");
	private static Pattern DATE_PATTERN2 = Pattern.compile("^\\d{2}\\.\\d{2}\\.\\d{4}$");
	private static Pattern DATE_PATTERN3 = Pattern.compile("^\\d{2}\\/\\d{2}\\/\\d{4}$");
	
	public String fix(String token)
	{
		int [] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		
		if (DATE_PATTERN1.matcher(token).matches()) {
			//YYYY-MM-DD
			String yyyy = token.substring(0,4);
			String mm = token.substring(5,7);
			String dd = token.substring(8,10);
			int m = Integer.valueOf(mm);
			int d = Integer.valueOf(dd);
			if (yyyy.equals("2022") && m >= 1 && m <= 12 && d > 0 && d <= daysInMonth[m-1]) {
				return "2023-"+mm+"-"+dd;
			}
		} else
		if (DATE_PATTERN2.matcher(token).matches()) {
			//DD.MM.YYYY
			String dd = token.substring(0,2);
			String mm = token.substring(3,5);
			String yyyy = token.substring(6,10);
			int m = Integer.valueOf(mm);
			int d = Integer.valueOf(dd);
			if (yyyy.equals("2022") && m >= 1 && m <= 12 && d > 0 && d <= daysInMonth[m-1]) {
				return dd+"."+mm+".2023";
			}
		} else
		if (DATE_PATTERN3.matcher(token).matches()) {
			//MM/DD/YYYY
			String mm = token.substring(0,2);
			String dd = token.substring(3,5);
			String yyyy = token.substring(6,10);
			int m = Integer.valueOf(mm);
			int d = Integer.valueOf(dd);
			if (yyyy.equals("2022") && m >= 1 && m <= 12 && d > 0 && d <= daysInMonth[m-1]) {
				return mm+"/"+dd+"/2023";
			}
		}
		
		return token;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		regex_SRM843_Div2_L2_DateCorrector2024 obj;
		String answer;
		obj = new regex_SRM843_Div2_L2_DateCorrector2024();
		long startTime = System.currentTimeMillis();
		answer = obj.fix(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		
		// ----- test 0 -----
		p0 = "2022-01-02";
		p1 = "2023-01-02";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "03.04.2022";
		p1 = "03.04.2023";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "05/06/2022";
		p1 = "05/06/2023";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "05/06/2021";
		p1 = "05/06/2021";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "05/06/2023";
		p1 = "05/06/2023";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "2022-00-02";
		p1 = "2022-00-02";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = "2022-02-30";
		p1 = "2022-02-30";
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = "0-1-2-3/4.5";
		p1 = "0-1-2-3/4.5";
		all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 8 -----
		p0 = "HappyNewYear!";
		p1 = "HappyNewYear!";
		all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 9 -----
		p0 = "3.4.2022";
		p1 = "3.4.2022";
		all_right = KawigiEdit_RunTest(9, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 10 -----
		p0 = "003.004.2022";
		p1 = "003.004.2022";
		all_right = KawigiEdit_RunTest(10, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 9 -----
		p0 = "30.02.2022";
		p1 = "30.02.2022";
		all_right = KawigiEdit_RunTest(9, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 9 -----
		p0 = "28.02.2022";
		p1 = "28.02.2023";
		all_right = KawigiEdit_RunTest(9, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 9 -----
		p0 = "31.12.2022";
		p1 = "31.12.2023";
		all_right = KawigiEdit_RunTest(9, p0, true, p1) && all_right;
		// ------------------

		// ----- test 9 -----
		p0 = "32.12.2022";
		p1 = "32.12.2022";
		all_right = KawigiEdit_RunTest(9, p0, true, p1) && all_right;
		// ------------------


		// ----- test 9 -----
		p0 = "00.12.2022";
		p1 = "00.12.2022";
		all_right = KawigiEdit_RunTest(9, p0, true, p1) && all_right;
		// ------------------
		
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
