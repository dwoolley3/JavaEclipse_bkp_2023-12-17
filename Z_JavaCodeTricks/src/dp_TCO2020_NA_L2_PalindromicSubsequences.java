package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class TCO2020_NA_L2_PalindromicSubsequences
{
	int MOD = 10000019;     
	
	public int count(String s)
	{		
		int ans = count2(s);		
		return ans;
	}
	
	private int count2(String s) {
		int n = s.length(); 
	       
        int[][] dp = new int[n + 1][n + 1]; 
        for (int i = 0; i < n; i++) 
	            dp[i][i] = 1; 
	       
        for (int len = 2; len <= n; len++) 
        { 
            for (int i = 0; i < n; i++) 
            { 
                int k = len + i - 1; 
                if (k < n) { 
	                if (s.charAt(i) == s.charAt(k)) 
	                    dp[i][k] = dp[i][k-1] + 
	                                dp[i+1][k] + 1; 
	                else
	                    dp[i][k] = dp[i][k-1] + 
	                                dp[i+1][k] - 
	                                dp[i+1][k-1];
	                if (dp[i][k] < 0) {
	                	dp[i][k] += MOD;
	                } else {
	                   dp[i][k] = dp[i][k] % MOD;
	                }
                } 
            } 
        } 
       
        return dp[0][n-1]; 
    }  
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		TCO2020_NA_L2_PalindromicSubsequences obj;
		int answer;
		obj = new TCO2020_NA_L2_PalindromicSubsequences();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		p0 = "AB";
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "ABA";
		p1 = 5;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "AAA";
		p1 = 7;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "ABCBA";
		p1 = 13;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
