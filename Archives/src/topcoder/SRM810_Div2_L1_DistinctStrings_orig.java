package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM810_Div2_L1_DistinctStrings_orig
{
	public String[] generate(int L, String letters, int N)
	{
		String[] s = new String[N];
		
		int[] per;
		int cnt = 0, inc = 0;
		
		int len = letters.length();
		if (L == 4) {
			for (int i = 0; i < len - 3 && cnt < N; i++)
				for (int j = i+1; j < len - 2 && cnt < N; j++)
					for (int k = j+1; k < len-1 && cnt < N; k++) 
						for (int m = k+1; m < len && cnt < N; m++) {
							s[cnt++] = "" + letters.charAt(i) + letters.charAt(j) +
									letters.charAt(k) + letters.charAt(m);
						}
		} else if (L == 3) {
			for (int i = 0; i < len - 2 && cnt < N; i++)
				for (int j = i+1; j < len - 1 && cnt < N; j++)
					for (int k = j+1; k < len && cnt < N; k++)  {
							s[cnt++] = "" + letters.charAt(i) + letters.charAt(j) +
									letters.charAt(k);
							if (cnt < N) {
								s[cnt++] = "" + letters.charAt(j) + letters.charAt(i) +
										letters.charAt(k);
							}
							if (cnt < N) {
								s[cnt++] = "" + letters.charAt(k) + letters.charAt(i) +
										letters.charAt(j);
							}
							if (cnt < N) {
								s[cnt++] = "" + letters.charAt(i) + letters.charAt(k) +
										letters.charAt(j);
							}
							if (cnt < N) {
								s[cnt++] = "" + letters.charAt(k) + letters.charAt(j) +
										letters.charAt(i);
							}
							if (cnt < N) {
								s[cnt++] = "" + letters.charAt(j) + letters.charAt(k) +
										letters.charAt(i);
							}
						}
			
		} else {
			
			while (cnt < N && L + inc <= letters.length()) {
				per = generateInitialPermutation(L); 
				do {
					s[cnt] = "";
					for (int i = 0; i < L; i++) {
						s[cnt] += letters.charAt(per[i]+inc);
					}
					cnt++;
				
				} while (cnt < N && next_permutation(per));  //next in lexicographical order
				inc++;
			}
		}

		return s;
	}
	
	public int[] generateInitialPermutation(int size)
	{
		int[] p = new int[size];
		for (int i = 0; i < size; i++) p[i] = i;
		return p;
	}
	
	public boolean next_permutation(int[] p) 
	{
		// 0,1,2 -> 0,2,1 -> 1,0,2 -> 1,2,0 -> 2,0,1 -> 2,1,0
		int t, n = p.length;
		for (int i = n - 2; i >= 0; i--)
		    if (p[i] < p[i + 1])
		    	for (int j = n - 1;; j--)
		    		if (p[j] > p[i]) 
		    		{
		    			t = p[i]; p[i] = p[j];  p[j] = t;
				        for (i++, j = n - 1; i < j; i++, j--) 
				        {
				        	t = p[i]; p[i] = p[j]; p[j] = t;
				        }
				        return true;
		    		}
		 return false;  //p is last lexicographically, e.g. -> 2, 1, 0
	}

	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, String p1, int p2, boolean hasAnswer, String[] p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "\"" + p1 + "\"" + "," + p2);
		System.out.println("]");
		SRM810_Div2_L1_DistinctStrings_orig obj;
		String[] answer;
		obj = new SRM810_Div2_L1_DistinctStrings_orig();
		long startTime = System.currentTimeMillis();
		answer = obj.generate(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p3.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p3[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p3.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p3[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		String p1;
		int p2;
		String[] p3;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = "qwertyuiopasdfghjklzxcvbnm";
		p2 = 10;
		p3 = new String[]{"hello","abcde","wwwww","coins","coder","digit","clash","qwert","puppy","kitty"};
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = "ABCDE02468";
		p2 = 17;
		p3 = new String[]{"ABC","D2E","DDD","AAA","EEE","024","042","204","240","402","420","4AB","4EE","E4E","ED4","868","844"};
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 8;
		p1 = "cdeopPrRtT";
		p2 = 4;
		p3 = new String[]{"topcoder","Topcoder","docopTer","receptor"};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 4;
		p1 = "cdeopPrRtT";
		p2 = 200;
		p3 = new String[]{"topcoder","Topcoder","docopTer","receptor"};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = "cdeopPrRtT";
		p2 = 200;
		p3 = new String[]{"topcoder","Topcoder","docopTer","receptor"};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 10;
		p1 = "cdeopPrRtT";
		p2 = 200;
		p3 = new String[]{"topcoder","Topcoder","docopTer","receptor"};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
