package topcoder;
//import java.math.BigInteger;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM643_Div2_L2_TheKingsFactorization
{
	public long[] getVector(long N, long[] primes)
	{		
		long lastp = primes[primes.length - 1];
		ArrayList<Long> al = new ArrayList<Long>();
		
		for (long p : primes)
		{
			N /= p;
			al.add(p);
		}		

		for (long i = 2; i*i <= N && i <= lastp; i++)
		{
			//if (BigInteger.valueOf(N).isProbablePrime(30)) break;
			while (N % i == 0) {
				al.add(i);
				N /= i;
			}
		}
		if (N > 1) al.add(N);
		
		long[] ans = new long[al.size()];
		for (int i = 0; i < al.size(); i++) ans[i] = al.get(i);
		Arrays.sort(ans);
		return ans;				
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, long p0, long[] p1, boolean hasAnswer, long[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM643_Div2_L2_TheKingsFactorization obj;
		long[] answer;
		obj = new SRM643_Div2_L2_TheKingsFactorization();
		long startTime = System.currentTimeMillis();
		answer = obj.getVector(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		long p0;
		long[] p1;
		long[] p2;
		
		p0 = 793558824758043976L;
		p1 = new long[]{2L, 2L};
		p2 = new long[]{2L, 2L, 2L, 99194853094755497L};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		p0 = 6839356425282358L;
		p1 = new long[]{2L, 150_659L};
		p2 = new long[]{2L, 150_659L, 150_659L, 150_659L};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		p0 = 999456071984544001L;
		p1 = new long[]{999727999L};
		p2 = new long[]{999727999L, 999727999L};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		p0 = 10000000002065383L;
		p1 = new long[]{10000000002065383L};
		p2 = new long[]{10000000002065383L};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 12L;
		p1 = new long[]{2L,3L};
		p2 = new long[]{2L,2L,3L};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 7L;
		p1 = new long[]{7L};
		p2 = new long[]{7L};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1764L;
		p1 = new long[]{2L,3L,7L};
		p2 = new long[]{2L,2L,3L,3L,7L,7L};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 49L;
		p1 = new long[]{7L};
		p2 = new long[]{7L,7L};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 210L;
		p1 = new long[]{2L,5L};
		p2 = new long[]{2L,3L,5L,7L};
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 100000L;
		p1 = new long[]{2L,2L,2L,5L,5L};
		p2 = new long[]{2L,2L,2L,2L,2L,5L,5L,5L,5L,5L};
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
