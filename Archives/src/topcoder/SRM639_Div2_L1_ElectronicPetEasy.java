package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM639_Div2_L1_ElectronicPetEasy
{
	public String isDifficult(int st1, int p1, int t1, int st2, int p2, int t2)
	{
		Set<Integer> s = new TreeSet<Integer>();
		for (int i = 0; i < t1; i++) 
			s.add(st1 + p1*i);
		for (int i = 0; i < t2; i++)
			if (s.contains(st2 + p2*i)) return "Difficult";
		return "Easy";
		
		//Original submission:
//		int[] a = new int[1_000_001];
//		for (int i = 0; i < t1; i++)
//			a[st1 + p1*i] = 1;
//		for (int i = 0; i < t2; i++)
//			if (a[st2 + p2*i] == 1) return "Difficult";
//		return "Easy";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, boolean hasAnswer, String p6) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4 + "," + p5);
		System.out.println("]");
		SRM639_Div2_L1_ElectronicPetEasy obj;
		String answer;
		obj = new SRM639_Div2_L1_ElectronicPetEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.isDifficult(p0, p1, p2, p3, p4, p5);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p6 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p6);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		int p5;
		String p6;
		
		// ----- test 0 -----
		p0 = 1000;
		p1 = 1000;
		p2 = 1000;
		p3 = 500;
		p4 = 500;
		p5 = 500;
		p6 = "Difficult";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 1000;
		p1 = 1000;
		p2 = 1000;
		p3 = 999;
		p4 = 1000;
		p5 = 1000;
		p6 = "Easy";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 3;
		p1 = 3;
		p2 = 3;
		p3 = 5;
		p4 = 2;
		p5 = 3;
		p6 = "Difficult";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 3;
		p2 = 3;
		p3 = 5;
		p4 = 2;
		p5 = 2;
		p6 = "Easy";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = 4;
		p2 = 7;
		p3 = 1;
		p4 = 4;
		p5 = 7;
		p6 = "Difficult";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1;
		p1 = 1000;
		p2 = 1000;
		p3 = 2;
		p4 = 1000;
		p5 = 1000;
		p6 = "Easy";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 1;
		p1 = 1;
		p2 = 1;
		p3 = 2;
		p4 = 2;
		p5 = 2;
		p6 = "Easy";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
