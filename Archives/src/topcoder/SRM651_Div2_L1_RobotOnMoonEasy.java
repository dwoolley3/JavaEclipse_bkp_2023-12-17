package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM651_Div2_L1_RobotOnMoonEasy
{
	public String isSafeCommand(String[] board, String S)
	{
		int n = board.length;
		int m = board[0].length();

		int r = -1, c = -1;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)			
				if (board[i].charAt(j) == 'S')
				{
					r = i; c = j;					
				}
		
		for (char ch : S.toCharArray())
		{
			int rPrev = r, cPrev = c;
			if (ch == 'U') r--;
			if (ch == 'D') r++;
			if (ch == 'L') c--;
			if (ch == 'R') c++;
			if (r < 0 || r == n || c < 0 || c == m)			
				return "Dead";
			if (board[r].charAt(c) == '#')
			{
				r = rPrev;
				c = cPrev;
			}		
		}
		return "Alive";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, String p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "\"" + p1 + "\"");
		System.out.println("]");
		SRM651_Div2_L1_RobotOnMoonEasy obj;
		String answer;
		obj = new SRM651_Div2_L1_RobotOnMoonEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.isSafeCommand(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String p1;
		String p2;
		
		// ----- test 0 -----
		p0 = new String[]{".....",".###.","..S#.","...#."};
		p1 = "URURURURUR";
		p2 = "Alive";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{".....",".###.","..S..","...#."};
		p1 = "URURURURUR";
		p2 = "Dead";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{".....",".###.","..S..","...#."};
		p1 = "URURU";
		p2 = "Alive";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"#####","#...#","#.S.#","#...#","#####"};
		p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
		p2 = "Alive";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"#####","#...#","#.S.#","#...#","#.###"};
		p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
		p2 = "Dead";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"S"};
		p1 = "R";
		p2 = "Dead";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
