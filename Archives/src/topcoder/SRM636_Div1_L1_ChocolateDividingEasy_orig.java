package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;

//Time Limit (2.0) Exceeded on 47x50 = 7.84 seconds

public class SRM636_Div1_L1_ChocolateDividingEasy_orig
{
	//Time Limit (2.0) Exceeded on 47x50 = 7.84 seconds
	
	public int findBest(String[] s)
	{
		int rows = s.length;
		int cols = s[0].length();
		int max = 0;
		int[] sum = new int[9];

		for (int c1 = 0; c1 < cols-1; c1++)
			for (int c2 = c1+1; c2 < cols; c2++)
				for (int r1 = 0; r1 < rows-1; r1++)
					for (int r2 = r1+1; r2 < rows; r2++)
					{
						sum[0] = getSum(0,   0, c1,    r1, s);
						sum[1] = getSum(c1+1,0, c2,    r1, s);
						sum[2] = getSum(c2+1,0, cols-1,r1, s);
						
						sum[3] = getSum(0,   r1+1, c1,r2, s);
						sum[4] = getSum(c1+1,r1+1, c2,r2, s);
						sum[5] = getSum(c2+1,r1+1, cols-1,r2, s);
						
						sum[6] = getSum(0,   r2+1, c1,    rows-1, s);
						sum[7] = getSum(c1+1,r2+1, c2,    rows-1, s);
						sum[8] = getSum(c2+1,r2+1, cols-1,rows-1, s);
						
						int min = Integer.MAX_VALUE;
						for (int i = 0; i < 9; i++)
							min = Math.min(min,  sum[i]);	
						max = Math.max(max,  min);
					}
		return max;
	}
	
	private int getSum(int x1, int y1, int x2, int y2, String[] s)
	{
		int sum = 0;
		for (int c = x1; c <= x2; c++)
			for (int r = y1; r <= y2; r++)
				sum += (s[r].charAt(c) - '0');
		return sum;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		SRM636_Div1_L1_ChocolateDividingEasy_orig obj;
		int answer;
		obj = new SRM636_Div1_L1_ChocolateDividingEasy_orig();
		long startTime = System.currentTimeMillis();
		answer = obj.findBest(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"77984272276600201227110313486773463011330910932376", 
				"20053189176803663796298617142905900530647320618107", 
				"85661954383655672098691119291461949236796253930152", 
				"02133257381911505882957486818330763000738949291990", 
				"49713773879376937136427839971995066335943092615529", 
				"29399819528478053604254181456760890781635602407089", 
				"60714548227935053089638672664771744318442135952260", 
				"32518266023853296490024593025640802840572858199039", 
				"25360291667398516933652355355840496418706735588391",
				"78711466945541427805894341334443234683499955297070", 
				"77912325880524080037026571651470363615325377098201",
				"90487393029723571924190092974904164803405309876960", 
				"67987829768822660614960178850558478270176171337621", 
				"21724732239034916839512226824036321794949964557150", 
				"21145423865158385547138793466968274839317942782556", 
				"26103039618413253766947387312074696191282123460947", 
				"55150946266023906019832388907374001105741345855786", 
				"86109101276937258407840311070858790800949662389322", 
				"00825956854431532751247892605027022827423068434619", 
				"73473591571063281667918712158277736086155453702160", 
				"87385608202109461444118755798597345008040250319673", 
				"09588255142237609689313818204964014832568881741722", 
				"65326600979532600126706733160589133903992066226350", 
				"14071304939022551700853415690391718049454476833005", 
				"29053332235355437042688366816971096339775330075780", 
				"16091760041771966474329629688600401599706893909647", 
				"00916404400404642839098139247819030970333695259453", 
				"67449953433724233158484349133681655543006308923449", 
				"30774365923939416146322523868471660009713308251187", 
				"93939279075701322511664757460249753692599081223695", 
				"76123819533120677814707631077926750063136441528400", 
				"80258660359727449281547172666887824603658822799817", 
				"99370116905995134262770219308699538660472161794133", 
				"33267370656574052876598325578823341099076953571768", 
				"33039204184348950141812547374169663705324858875880", 
				"18354949700308156109369169028841879263354384211051", 
				"90813403803242936860305469579291392634047361784460", 
				"41115713505638577027492302146962093676947420590292", 
				"16339570159779737696283418310451086956161239404185", 
				"00636919036766748201824330491461526319534120797717", 
				"91155651585222486801342651541912057714874416857657", 
				"79115852261604191452198486053742854361889169778923", 
				"35410272921350115723537224125578319549933098001875", 
				"34808272427332547136699591519463975792965990164190", 
				"96983801195044704845696818661680279771892497089483", 
				"25585681497201119127063154140902653131301243464598", 
				"49482045664613344959962316153037107521088759083670"};
		p1 = 1096;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new String[]{"390229","616083","722291","576379","301734","598567","637918","269223"};
		p1 = 14;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new String[]{"9768","6767","5313"};
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"36753562","91270936","06261879","20237592","28973612","93194784"};
		p1 = 15;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"012","345","678"};
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
