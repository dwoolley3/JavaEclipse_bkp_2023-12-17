package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM564_Div2_L2_AlternateColors
{
	public String getColor(long r, long g, long b, long k)
	{
        ArrayList<Long> col = new ArrayList<Long>(Arrays.asList(r, g, b ));
        ArrayList<String> name = new ArrayList<String>(Arrays.asList("RED", "GREEN", "BLUE"));
        int i, num = col.size(); //3

        long min = Math.min(Math.min(r, g), b);
        if (k <= min * num)
        {
            i = (int)((k - 1) % num);
            return name.get(i);
        }
        for (i = num-1; i >= 0; i--)
        {
            col.set(i, col.get(i) - min);
            k -= min;
            if (col.get(i) == 0)
            {
                col.remove(i);
                name.remove(i);
                num--;
            }
        }
        if (num == 1) return name.get(0);

        min = Math.min(col.get(0),col.get(1));
        if (k <= min * num)
        {
            i = (int)((k - 1) % num);
            return name.get(i);
        }
        if (col.get(1) > col.get(0)) return name.get(1);
        return name.get(0);     
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, long p0, long p1, long p2, long p3, boolean hasAnswer, String p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		SRM564_Div2_L2_AlternateColors obj;
		String answer;
		obj = new SRM564_Div2_L2_AlternateColors();
		long startTime = System.currentTimeMillis();
		answer = obj.getColor(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p4 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p4);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		long p0;
		long p1;
		long p2;
		long p3;
		String p4;
		
		// ----- test 0 -----
		p0 = 1L;
		p1 = 1L;
		p2 = 1L;
		p3 = 3L;
		p4 = "BLUE";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3L;
		p1 = 4L;
		p2 = 5L;
		p3 = 4L;
		p4 = "RED";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 7L;
		p1 = 7L;
		p2 = 1L;
		p3 = 7L;
		p4 = "GREEN";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1000000000000L;
		p1 = 1L;
		p2 = 1L;
		p3 = 1000000000002L;
		p4 = "RED";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 653L;
		p1 = 32L;
		p2 = 1230L;
		p3 = 556L;
		p4 = "BLUE";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
