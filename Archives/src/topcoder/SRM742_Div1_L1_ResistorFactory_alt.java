package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM742_Div1_L1_ResistorFactory_alt
{
	//Solution by pashka
	public int[] construct(long nanoOhms)
	{
		int MAX = 100;
		int[] res = new int[3000];
		int n = 0;
		double[] d = new double[3000];
		d[0] = 1;
		for (int i = 1; i < MAX; i++) {
			res[n*3] = n;
			res[n*3+1] = n;
			res[n*3+2] = 1;
			d[n+1] = d[n] / 2;
			n++;			
		}
		for (int i = 1; i < 2 * MAX; i++) {
			res[n*3] = n;
			res[n*3+1] = n;
			res[n*3+2] = 0;
			d[n+1] = d[n] * 2;
			n++;			
		}
		res[n*3] = MAX;
		res[n*3+1] = MAX;
		res[n*3+2] = 0;
		n++;
		double need = nanoOhms * 1e-9;
		for (int i = n-1; i >= 0; i--) {
			if (need >= d[i]) {
				need -= d[i];
				res[n*3] = n;
				res[n*3+1] = i;
				res[n*3+2] = 0;
				n++;
			}
		}


		int[] res2 = new int[3*n];
		System.arraycopy(res,  0,  res2,  0,  3*n);
		return res2;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, long p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		SRM742_Div1_L1_ResistorFactory_alt obj;
		int[] answer;
		obj = new SRM742_Div1_L1_ResistorFactory_alt();
		long startTime = System.currentTimeMillis();
		answer = obj.construct(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		long p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = 3000000000L;
		p1 = new int[]{0,0,0,0,1,0};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 1200000000L;
		p1 = new int[]{0,0,0,1,0,0,1,2,1};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1428571428L;
		p1 = new int[]{0,0,0,0,1,0,1,2,0,3,1,1};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 12000000001L;
		p1 = new int[]{0,0,0,0,1,0,2,2,0,3,3,0};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 333333333L;
		p1 = new int[]{0,0,1,0,1,1};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
