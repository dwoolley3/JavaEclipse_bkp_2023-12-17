package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM819_Div2_L2_Catchphrase
{
	public int reconstruct(int Ascore, int Bscore)
	{
//		int sum = Ascore + Bscore;
//		if (sum < 1500 || Ascore % 100 > 0 || Bscore % 100 > 0 
//					   || (Ascore < 1000 && Bscore < 1000)) { 
//			return -1;
//		}
		
		int best = -1;			
		int[] bonus = {1500, 1000, 500, 0};
		int[] bonnum = {2,1,1,0};
		
		for (int i = 0; i < 4; i++) {
			int a = Ascore; int b = Bscore;
			a -= bonus[i]; b -= (1500 - bonus[i]);
			if (a >= 0 && b >= 0) {
				for (int r1 = 0; r1 <= 9; r1++) {
					for (int r2 = 0; r2 <= 9; r2++) {
						int left = a - r1*100 - r2*200;
						if (left >= 0 && left % 500 == 0) {
							int r3 = left / 500;
							
							boolean possible = false;
							for (int r1b = 0; r1b <= 9-r1 && !possible; r1b++) {
								for (int r2b = 0; r2b <= 9-r2 && !possible; r2b++) {
									int leftb = b - r1b*100 - r2b * 200;
									if (leftb >= 0 && leftb % 500 == 0) {
										possible = true;
									}
								}
							}
							
							if (possible) {
								//System.out.println(r1 + " " + r2 + " " + r3 + " " + bonnum[i] + " = " + (r1+r2+r3+bonnum[i]));
								best = Math.max(best, r1+r2+r3+bonnum[i]);
							}						
						}
					}
				}		
			}
		}
		
		
		return best;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		SRM819_Div2_L2_Catchphrase obj;
		int answer;
		obj = new SRM819_Div2_L2_Catchphrase();
		long startTime = System.currentTimeMillis();
		answer = obj.reconstruct(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = 900;
		p1 = 900;
		p2 = -1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 47;
		p1 = 1953;
		p2 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1800;
		p1 = 0;
		p2 = 5;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1100;
		p1 = 2000;
		p2 = 10;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 4300;
		p1 = 1100;
		p2 = 19;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
				
		// ----- test 4 -----
		p0 = 994300;
		p1 = 991100;
		p2 = 1999;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
