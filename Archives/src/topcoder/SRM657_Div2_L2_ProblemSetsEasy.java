package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM657_Div2_L2_ProblemSetsEasy
{
	public int maxSets(int E, int EM, int M, int MH, int H)
	{
		int sum = E + EM + M + MH + H;
		int max = sum / 3, ans = 0;
		for (int i = max; i >= 0; i--)
		{
			int e = E, em = EM, m = M, mh = MH, h = H;
			if (e < i && e + em >= i)
			{
				em = em + e - i;
				e = i;
			}
			m += em;
			if (h < i && h + mh >= i)
			{
				mh = mh + h - i;
				h = i;
			}
			m += mh;
			int maxSet = Math.min(Math.min(e,m),h);
			ans = Math.max(ans,  maxSet);
		}
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, boolean hasAnswer, int p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4);
		System.out.println("]");
		SRM657_Div2_L2_ProblemSetsEasy obj;
		int answer;
		obj = new SRM657_Div2_L2_ProblemSetsEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.maxSets(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p5);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p5;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		int p5;
		
		// ----- test 4 -----
		p0 = 0;
		p1 = 100000;
		p2 = 0;
		p3 = 100000;
		p4 = 1;
		p5 = 66667;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 5;
		p1 = 4;
		p2 = 3;
		p3 = 2;
		p4 = 1;
		p5 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 101;
		p1 = 0;
		p2 = 100;
		p3 = 100;
		p4 = 100;
		p5 = 101;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 2;
		p2 = 1;
		p3 = 2;
		p4 = 2;
		p5 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 100;
		p1 = 100;
		p2 = 100;
		p3 = 0;
		p4 = 0;
		p5 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 657;
		p1 = 657;
		p2 = 657;
		p3 = 657;
		p4 = 657;
		p5 = 1095;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1;
		p1 = 2;
		p2 = 3;
		p3 = 4;
		p4 = 5;
		p5 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100000;
		p1 = 100000;
		p2 = 100000;
		p3 = 100000;
		p4 = 100000;
		p5 = 166666;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
