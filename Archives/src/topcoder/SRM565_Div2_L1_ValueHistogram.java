package topcoder;
import java.util.Arrays;

//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM565_Div2_L1_ValueHistogram
{
	public String[] build(int[] values)
	{
        int[] c = new int[10];
        int n = values.length;
        int max = 0;
        for (int i = 0; i < n; i++)
        {
            int j = values[i];
            c[j]++;
            if (c[j] > max) max = c[j];
        }

        String[] s = new String[max + 1];
        Arrays.fill(s, "");
        
        for (int i = 0; i <= max; i++)
            for (int j = 0; j < 10; j++)
                if (c[j] > i)
                    s[max-i] += "X";
                else
                    s[max-i] += ".";

        return s;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM565_Div2_L1_ValueHistogram obj;
		String[] answer;
		obj = new SRM565_Div2_L1_ValueHistogram();
		long startTime = System.currentTimeMillis();
		answer = obj.build(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String[] p1;
		
		// ----- test 0 -----
		p0 = new int[]{2,3,5,5,5,2,0,8};
		p1 = new String[]{"..........",".....X....","..X..X....","X.XX.X..X."};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{9,9,9,9};
		p1 = new String[]{"..........",".........X",".........X",".........X",".........X"};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{6,4,0,0,3,9,8,8};
		p1 = new String[]{"..........","X.......X.","X..XX.X.XX"};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,1,2,3,4,5,6,7,8,9};
		p1 = new String[]{"..........","XXXXXXXXXX"};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{6,2,3,3,3,7,8,1,0,9,2,2,4,3};
		p1 = new String[]{"..........","...X......","..XX......","..XX......","XXXXX.XXXX"};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
