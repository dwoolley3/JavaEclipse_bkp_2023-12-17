package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class TCO2017_Pitt_L1_UnclearNotes
{
	public String isMatch(String S, String T)
	{
		for (int i = 0; i < S.length(); i++) {
			char cs = S.charAt(i);
			char ct = T.charAt(i);
			if (cs == ct) continue;
			if ((cs == 'o' || cs == '0') && (ct == 'o' || ct == '0')) continue;
			if ((cs == 'l' || cs == '1') && (ct == 'l' || ct == '1')) continue;
			if ((cs == 'm' || cs == 'n') && (ct == 'm' || ct == 'n')) continue;
			return "Impossible";
		}
		return "Possible";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
		System.out.println("]");
		TCO2017_Pitt_L1_UnclearNotes obj;
		String answer;
		obj = new TCO2017_Pitt_L1_UnclearNotes();
		long startTime = System.currentTimeMillis();
		answer = obj.isMatch(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		String p2;
		
		// ----- test 0 -----
		p0 = "topc0der";
		p1 = "topcoder";
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "topcoder";
		p1 = "codertop";
		p2 = "Impossible";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "o0ol1lnmn";
		p1 = "oo0ll1nnm";
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "c01unn";
		p1 = "column";
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "0";
		p1 = "l";
		p2 = "Impossible";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "81vdiu0n50mxlxopqn8olxbqromvkral21nbi";
		p1 = "llv0i00p50nx1xs1qn1o13bqaomv0r152lmgi";
		p2 = "Impossible";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = "nl91gn9lnnqpyo09ml1h140onnomoonr0ow24qfw0muf";
		p1 = "nl9lgn91nmqpy009ml1hl4o0nm0mo0nro0w24qfwonuf";
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
