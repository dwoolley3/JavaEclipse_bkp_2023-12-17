//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class perm_SRM592_L2_LittleElephantAndPermutationDiv2
{
    long cnt = 0;
    int k, n;
    int[] p;
    
	public long getNumber(int N, int K)
	{
        k = K;
        n = N;
        int f = 1;
        p = new int[N];
        for (int i = 1; i <= N; i++)
        {
            f *= i;
            p[i-1] = i;
        }
        permute(0);

        long ans = cnt * f;
        return ans;
    }

    public void permute(int x)
    {
        //permute array p[0]...p[n-1], not always in order but quick; n=10 < 1.5 sec
        if (x >= n)
        {
            gotPerm();
            return;
        }
        int t;
        for (int i = x; i < n; i++)
        {
            t = p[x]; p[x] = p[i]; p[i] = t;
            permute(x + 1);
            t = p[x]; p[x] = p[i]; p[i] = t;
        }
    }

    private void gotPerm()
    {
        int sum = 0;
        for (int i = 0; i < n; i++)
        {
            sum += (Math.max(i + 1, p[i]));
            //System.out.print(p[i]);
        }
        //System.out.println();
        if (sum >= k)
            cnt++;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		perm_SRM592_L2_LittleElephantAndPermutationDiv2 obj;
		long answer;
		obj = new perm_SRM592_L2_LittleElephantAndPermutationDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		long p2;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 1;
		p2 = 1L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = 1;
		p2 = 4L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = 8;
		p2 = 18L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10;
		p1 = 47;
		p2 = 13168189440000L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
