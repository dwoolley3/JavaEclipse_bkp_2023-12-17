package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM632_Div1_L1_PotentialArithmeticSequence
{
	public int numberOfSubsequences(int[] d)
	{
		int n = d.length, cnt = 0;		
		for (int i = 0; i < n; i++)
			for (int j = i; j < n; j++)
				cnt += good(i,j,d);
			
		return cnt;		
	}
	
	public int good(int a, int b, int[] d)
	{
		if (a==b) return 1;
		int max = -1, maxi = -1;
		for (int i = a; i <= b; i++)
		{
			if (d[i] > max)
			{
				max = d[i]; maxi = i;
			}
		}
		
		int[] pat = new int[]{0,1,0, 2, 0,1,0, 3, 0,1,0, 2, 0,1,0, 4, 
				0,1,0, 2, 0,1,0, 3, 0,1,0, 2, 0,1,0, 5, 0,1,0, 2, 
				0,1,0, 3, 0,1,0, 2, 0,1,0, 4, 0,1,0};
		
		int ia = maxi, ib = maxi, i = 0;
		//if (max > 10) max = 10;
		//int num = (1 << 12) + (1 << max);
		//int numa = num, numb = num;
		while (ia >= a || ib <= b)
		{
			ia--;
			ib++; 
			//numa--; numb++;
			//if (ia >= a && Integer.numberOfTrailingZeros(numa) != d[ia]) return 0;
			//if (ib <= b && Integer.numberOfTrailingZeros(numb) != d[ib]) return 0;

			if (ia >= a && (pat[i] != d[ia] || d[ia] >= max)) return 0;
			if (ib <= b && (pat[i] != d[ib] || d[ib] >= max)) return 0;
			i++;
		}
		return 1;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM632_Div1_L1_PotentialArithmeticSequence obj;
		int answer;
		obj = new SRM632_Div1_L1_PotentialArithmeticSequence();
		long startTime = System.currentTimeMillis();
		answer = obj.numberOfSubsequences(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{4, 0,1,0, 2, 0,1,0, 999999999, 0,1,0, 2, 0,1,0, 3, 0,1,0, 2, 0,1,0, 4,
				0,1,0, 2, 0,1,0, 3, 0,1,0, 2, 0,1,0, 5};
		p1 = 828;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new int[]{0,1,0,2,0,1,0};
		p1 = 28;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{0,0,0,0,0,0,0};
		p1 = 7;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,0,0,0,1,1,1};
		p1 = 8;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,100,0,2,0};
		p1 = 11;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,11,3,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,1,2,3,20};
		p1 = 49;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
