package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM826_Div2_L1_GetGas
{
	public double optimize(int G, int[] Dto, int[] Dfrom, int[] gasPrice)
	{
		int n = Dto.length;
		double min = 1e12;
		for (int i = 0; i < n; i++) {
			double gas = G;
			gas -= (Dto[i] / 25.0);
			if (gas < 0) continue;
			double gasNeeded = (Dfrom[i] / 25.0) - gas;
			gasNeeded = Math.max(gasNeeded, 0);
			double cost = gasPrice[i] * gasNeeded;
			if (cost < min) {
				min = cost;
			}			
		}
		return min;		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, int[] p3, boolean hasAnswer, double p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM826_Div2_L1_GetGas obj;
		double answer;
		obj = new SRM826_Div2_L1_GetGas();
		long startTime = System.currentTimeMillis();
		answer = obj.optimize(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int[] p2;
		int[] p3;
		double p4;
		
		// ----- test 0 -----
		p0 = 10;
		p1 = new int[]{250,250};
		p2 = new int[]{500,600};
		p3 = new int[]{400,400};
		p4 = 8000.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = new int[]{250,250};
		p2 = new int[]{500,600};
		p3 = new int[]{500,400};
		p4 = 9600.0D;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 100;
		p1 = new int[]{10,20,30,1000};
		p2 = new int[]{30,20,10,1000};
		p3 = new int[]{423,434,445,456};
		p4 = 0.0D;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10;
		p1 = new int[]{240,260};
		p2 = new int[]{1000,10};
		p3 = new int[]{417,233};
		p4 = 16513.2D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1;
		p1 = new int[]{25};
		p2 = new int[]{10};
		p3 = new int[]{10};
		p4 = 4.0D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
