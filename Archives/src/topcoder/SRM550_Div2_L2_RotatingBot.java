package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM550_Div2_L2_RotatingBot
{
	public int minArea(int[] moves)
	{
        int n = moves.length;
        int w =0, h=0;
        if (n == 1)
            return moves[0] + 1;
        else if (n == 2)
            return (moves[0] + 1) * (moves[1] + 1);
        else if (n == 3)
        {
            w = Math.max(moves[0] + 1, moves[2] + 1);
            h = moves[1] + 1;
            return w * h;
        }
        else if (n == 4)
        {
            w = Math.max(moves[0] + 1, moves[2] + 1);
            h = Math.max(moves[1] + 1, moves[3] + 1);
            if (moves[2] < moves[0])
                return -1;
            else if (moves[2] == moves[0] && moves[3] >= moves[1])
                return -1;
            else
                return w * h;
        }
        else // n > 4
        {
            w = Math.max(moves[0] + 1, moves[2] + 1);
            h = Math.max(moves[1] + 1, moves[3] + 1);
            if (moves[2] < moves[0])
                return -1;
            else if (moves[2] == moves[0] && moves[3] != moves[1] -1)
                return -1;
            else if (moves[2] == moves[0])
            {
                //top part
                for (int i = 4; i < n -1; i++)
                {
                    if (moves[i] != moves[i-2] - 1)
                        return -1;
                }
                if (moves[n - 1] >= moves[n - 3])
                    return -1;
                else              
                    return w * h;
            }
            else if (moves[2] > moves[0] && moves[3] < moves[1])
                return -1;
            else if (moves[2] > moves[0] && moves[3] == moves[1])
            {
                if (moves[4] != moves[2] - moves[0] - 1)
                    return -1;
                else
                {
                    for (int i = 5; i < n - 1; i++)
                    {
                        if (moves[i] != moves[i - 2] - 1)
                            return -1;
                    }
                    if (moves[n - 1] >= moves[n - 3])
                        return -1;
                    else
                        return w * h;
                }
            }
            else //moves[2] > moves[0] && moves[3] > moves [1]
            //bottom part
            {
                if (n == 5 && moves[4] > moves[2])
                    return -1;
                else if (n == 5)
                    return w * h;
                else if (n > 5 && moves[4] != moves[2])
                    return -1;
                moves[3] = moves[3] - moves[1];
                for (int i = 5; i < n -1; i++)
                {
                    if (moves[i] != moves[i - 2] - 1)
                        return -1;
                }

                if (moves[n - 1] >= moves[n - 3])
                    return -1;
                else
                    return w * h;
            }
        }
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM550_Div2_L2_RotatingBot obj;
		int answer;
		obj = new SRM550_Div2_L2_RotatingBot();
		long startTime = System.currentTimeMillis();
		answer = obj.minArea(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{15};
		p1 = 16;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{3,10};
		p1 = 44;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,1,1,1};
		p1 = -1;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{9,5,11,10,11,4,10};
		p1 = 132;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{12,1,27,14,27,12,26,11,25,10,24,9,23,8,22,7,21,6,20,5,19,4,18,3,17,2,16,1,15};
		p1 = 420;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{8,6,6,1};
		p1 = -1;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{8,6,6};
		p1 = 63;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = new int[]{5,4,5,3,3};
		p1 = 30;
		all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
