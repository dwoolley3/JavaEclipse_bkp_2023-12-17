package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;

public class SRM652_Div2_L3_NoRightTurnDiv2
{
	public int[] findPath(int[] x, int[] y)
	{
		int n = x.length;
		boolean[] vis = new boolean[n];
		int[] ans = new int[n];
		int s = 0;		
		for (int i = 1; i < n; i++)
			if (x[i] < x[s] || (x[i] == x[s] && y[i] < y[s]))
				s = i;
		
		ans[0] = s;
		vis[s] = true;
		for (int i = 1; i < n; i++)
		{
			int k = -1;
			for (int j = 0; j < n; j++)
				if (!vis[j] && (k == -1 || 
					ccw(x, y, s, j, k)))
					//counterclockwise(x[s],y[s],x[j],y[j],x[k],y[k])))
					k = j;
			s = k;
			ans[i] = s;
			vis[s] = true;
		}
		return ans;
	}
	
	// Are points a,b,c (in that order) in counter clockwise order?
	private boolean ccw(int[] x, int[] y, int a, int b, int c)
	{
		return (y[c]-y[a])*(x[b]-x[a]) > (y[b]-y[a])*(x[c]-x[a]);
	}
	
	@SuppressWarnings("unused")
	private boolean counterclockwise(double ax, double ay, 
			double bx, double by, double cx, double cy)
	{
		//Given three points a, b, and c, is a --> b --> c a counterclockwise turn?
		return (cy-ay)*(bx-ax) > (by-ay)*(cx-ax);
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM652_Div2_L3_NoRightTurnDiv2 obj;
		int[] answer;
		obj = new SRM652_Div2_L3_NoRightTurnDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.findPath(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int[] p2;
		
		// ----- test 0 -----
		p0 = new int[]{-10,0,10};
		p1 = new int[]{10,-10,10};
		p2 = new int[]{0,1,2};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{0,0,-3,-3,3,3};
		p1 = new int[]{-1,1,-3,3,-3,3};
		p2 = new int[]{0,4,5,3,2,1};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{10,9,8,7,6,5,4,3,2,1};
		p1 = new int[]{1,4,9,16,25,36,49,64,81,100};
		p2 = new int[]{9,8,7,6,5,4,3,2,1,0};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,2,-2,4,-4,2,-2,0};
		p1 = new int[]{1,2,2,4,4,6,6,5};
		p2 = new int[]{4,2,0,1,3,5,6,7};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{-76,98,83,58,-15,94,21,55,80,84,-39,-90,-46,100,-80,-49,-2,-70,36,48,88,10,55,-56,22,67,31,81,100,-39,64,-62,-7,45,-82,-24,51,-33,53,11,20,-74,-83,47,9,39,42,63,-97,94};
		p1 = new int[]{-90,68,91,-92,-6,88,99,10,39,-69,-61,-4,71,-5,90,-51,21,-53,-21,-86,41,-9,42,-23,-4,12,94,-59,55,18,70,-88,-86,-17,-97,-33,87,80,91,-80,-79,-79,-78,-99,57,67,-52,-46,61,-10};
		p2 = new int[]{39,32,40,31,19,27,47,46,0,34,43,3,9,13,28,1,5,2,6,14,48,42,41,49,20,38,26,37,12,11,17,10,33,25,8,30,36,44,29,23,15,18,7,22,45,16,4,35,24,21};
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
