package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM459_Div2_L2_Inequalities
{
	public int maximumSubset(String[] inequalities)
	{
        int n = inequalities.length;
        int max = 0;
        for (double x = -2; x < 1002; x += 0.5)
        {
            int cnt = 0;
            for (int i = 0; i < n; i++)
            {
                String[] s = inequalities[i].split(" ");                
                String sym = s[1];
                int c = Integer.parseInt(s[2]);
                if (sym.equals("<=") && x <= c) cnt++;
                else if (sym.equals(">=") && x >= c) cnt++;
                else if (sym.equals("=") && x == c) cnt++;
                else if (sym.equals("<") && x < c) cnt++;
                else if (sym.equals(">") && x > c) cnt++;
            }
            max = Math.max(max, cnt);
        }
        return max;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		SRM459_Div2_L2_Inequalities obj;
		int answer;
		obj = new SRM459_Div2_L2_Inequalities();
		long startTime = System.currentTimeMillis();
		answer = obj.maximumSubset(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"X <= 12","X = 13","X > 9","X < 10","X >= 14"};
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"X < 0","X <= 0"};
		p1 = 2;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"X = 1","X = 2","X = 3","X > 0"};
		p1 = 2;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"X <= 521","X >= 521","X = 521","X > 902","X > 12","X <= 1000"};
		p1 = 5;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
