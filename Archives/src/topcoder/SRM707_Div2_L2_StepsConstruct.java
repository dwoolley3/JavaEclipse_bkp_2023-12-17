package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM707_Div2_L2_StepsConstruct
{
	public String construct(String[] board, int kk)
	{
		int n = board.length;
		int m = board[0].length();

	    //Start facing North, then turn 90 degrees to the right, go clockwise
	    int[] dx = new int[] { 0, 1, 0, -1 };
	    int[] dy = new int[] { 1, 0, -1, 0 };
	    String dirs = "LURD";
        
	    int r = 0, c = 0;       	
        
		int least = (n-1) + (m-1);
		if (kk >= least && (kk - least) % 2 == 0
				&& board[0].charAt(0) == '.' && board[n-1].charAt(m-1) == '.')
		{
			boolean[][] used = new boolean[n][m];
			int[][] g = new int[n][m];
			Queue<Integer> quer = new LinkedList<Integer>();
			Queue<Integer> quec = new LinkedList<Integer>();
			quer.add(0);
			quec.add(0);
			used[0][0] = true;
			while (!quer.isEmpty())
			{
				r = quer.poll(); //Retreive and remove from head
				c = quec.poll();

				for (int dir = 0; dir < 4; dir++)
				{
					int x = r + dx[dir];
					int y = c + dy[dir];
					if (x >= 0 && x < n && y >= 0 && y < m)
					{
						if (board[x].charAt(y) == '.' && !used[x][y])
						{
							g[x][y] = g[r][c] + 1;
							used[x][y] = true;
							quer.add(x);
							quec.add(y);
						}
					}
				}
			}
	        
	        int min = g[n-1][m-1];
	        String s = "";
	        if (min > 0 && kk >= min && (kk - min) % 2 == 0)
	        {
	        	r = n-1;
	        	c = m-1;
	        	int cnt = 1;
	        	while (min - cnt >= 0)
	        	{
					for (int dir = 0; dir < 4; dir++)
					{
						int x = r + dx[dir];
						int y = c + dy[dir];
						if (x >= 0 && x < n && y >= 0 && y < m)
						{
							if (min - cnt == 0)
							{
								if (x == 0 && y == 0)
								{
									char ch = dirs.charAt(dir);
									s += ch;
									cnt = kk - min;
									ch = s.charAt(0);
									while (cnt > 0)
									{
										if (ch == 'R')
											s = "RL" + s;
										else if (ch == 'L')
											s = "LR" + s;
										else if (ch == 'U')
											s = "UD" + s;
										else if (ch == 'D')
											s = "DU" + s;
										cnt -= 2;
									}
									return s;
								}
							}
							else if (g[x][y] == min - cnt)
							{
								cnt++;
								s += dirs.charAt(dir);
								r = x;
								c = y;
							}
						}
					}
	        	}
	        }
		}
		return "";
	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		SRM707_Div2_L2_StepsConstruct obj;
		String answer;
		obj = new SRM707_Div2_L2_StepsConstruct();
		long startTime = System.currentTimeMillis();
		answer = obj.construct(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		String p2;
		
		// ----- test 0 -----
		p0 = new String[]{"...",".#.","..."};
		p1 = 4;
		p2 = "DDRR";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"...",".#.","..."};
		p1 = 12;
		p2 = "DDRRUULLDDRR";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"...#.","..#..",".#..."};
		p1 = 100;
		p2 = "";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"..#","#.#","..#",".#.","..."};
		p1 = 6;
		p2 = "";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{".#...",".#.#.",".#.#.",".#.#.","...#."};
		p1 = 16;
		p2 = "DDDDRRUUUURRDDDD";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"#.",".."};
		p1 = 2;
		p2 = "";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new String[]{".#...",".#.#.",".#.#.",".#.#.","....."};
		p1 = 18;
		p2 = "DDDDRRUUUURRDDDDDD";
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
