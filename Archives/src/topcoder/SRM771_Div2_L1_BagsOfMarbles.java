package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM771_Div2_L1_BagsOfMarbles
{
	public int removeFewest(int desired, int bagSize, int noWhiteBags, int noBlackBags, int someWhiteBags, int someBlackBags)
	{
		int w = Math.min(noBlackBags * bagSize, desired);
		if (w == desired) return w;
		// w is less than desired
		int need = desired - w;
		if (someWhiteBags >= need) {
			w += need * bagSize;
			return w;
		} 
		else { 
			return -1;
		}
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, boolean hasAnswer, int p6) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4 + "," + p5);
		System.out.println("]");
		SRM771_Div2_L1_BagsOfMarbles obj;
		int answer;
		obj = new SRM771_Div2_L1_BagsOfMarbles();
		long startTime = System.currentTimeMillis();
		answer = obj.removeFewest(p0, p1, p2, p3, p4, p5);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p6);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p6;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		int p5;
		int p6;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 10;
		p2 = 0;
		p3 = 1;
		p4 = 0;
		p5 = 0;
		p6 = 5;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = 10;
		p2 = 2;
		p3 = 0;
		p4 = 1;
		p5 = 0;
		p6 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 51;
		p1 = 7;
		p2 = 7;
		p3 = 7;
		p4 = 7;
		p5 = 7;
		p6 = 63;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 51;
		p1 = 7;
		p2 = 7;
		p3 = 7;
		p4 = 1;
		p5 = 1;
		p6 = -1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------	
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
