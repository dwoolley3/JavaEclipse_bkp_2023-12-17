package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM666_Div1_L2_SumOverPermutations
{
	public int findSum(int n)
	{
		long MOD = 1_000_000_007;
		long ans = 0;
		if (n==1) return 1;
		if (n==2) return 4;
		if (n==3) return 66;
		
		int[] per = generateInitialPermutation(n);  //Initial = 0,1,...n-1
		
		int[] b = new int[100_000_000];
		do {
			int[] a = new int[n];
			long prod = 1;
			for (int i = 0; i <= n-1; i++)
			{
				a[per[i]] = 1;
				int x = 0;
				if (per[i] > 0   && a[per[i]-1] == 1) x++;
				if (per[i] < n-1 && a[per[i]+1] == 1) x++;
				int num = n - x;
				System.out.print(num + " ");
				prod *= num;
				prod = prod % MOD;		
			}
			//System.out.println(" = " + prod);
			b[(int)prod]++;
			ans += prod;
			ans = ans % MOD;	
		} while (next_permutation(per));  //next in lexicographical order
			
		for (int i = 0; i < 100_000_000; i++)
			if (b[i] > 0) System.out.println(i + " " + b[i]);
		
		return (int)ans;
	}
	
	public int[] generateInitialPermutation(int size)
	{
		int[] p = new int[size];
		for (int i = 0; i < size; i++) p[i] = i;
		return p;
	}
	
	public boolean next_permutation(int[] p) 
	{
		// 0,1,2 -> 0,2,1 -> 1,0,2 -> 1,2,0 -> 2,0,1 -> 2,1,0
		int t, n = p.length;
		for (int i = n - 2; i >= 0; i--)
		    if (p[i] < p[i + 1])
		    	for (int j = n - 1;; j--)
		    		if (p[j] > p[i]) 
		    		{
		    			t = p[i]; p[i] = p[j];  p[j] = t;
				        for (i++, j = n - 1; i < j; i++, j--) 
				        {
				        	t = p[i]; p[i] = p[j]; p[j] = t;
				        }
				        return true;
		    		}
		 return false;  //p is last lexicographically, e.g. -> 2, 1, 0
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		SRM666_Div1_L2_SumOverPermutations obj;
		int answer;
		obj = new SRM666_Div1_L2_SumOverPermutations();
		long startTime = System.currentTimeMillis();
		answer = obj.findSum(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 4;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 66;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 4;
		p1 = 66;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 7;
		p1 = 66;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 8;
		p1 = 66;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		
		// ----- test 1 -----
		p0 = 7;
		p1 = 66;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 10;
		p1 = 58310114;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 3900;
		p1 = 940560814;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
