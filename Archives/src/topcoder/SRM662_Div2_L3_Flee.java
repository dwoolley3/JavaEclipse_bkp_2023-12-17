package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM662_Div2_L3_Flee
{
	public double maximalSafetyLevel(int[] x, int[] y)
	{
		int n = x.length;
		double ans = Double.MAX_VALUE;
		
		for (int i = 0; i < n; i++)
		{
			double d = Math.sqrt(x[i]*x[i] + y[i]*y[i]);
			ans = Math.min(ans, d);
		}
				
		if (n==3 && isInsideTri(x[0],y[0],x[1],y[1],x[2],y[2]))
		{
			double max = 0;
			for (int i = 0; i < n; i++)
			{
				int x1 = x[i] - x[(i+1)%n];
				int y1 = y[i] - y[(i+1)%n];
				double d = Math.sqrt(x1*x1 + y1*y1);
				max = Math.max(max, d/2.0);
			}
			ans = Math.min(ans,max);
		}
		return ans;
	}
	
	private boolean isInsideTri(int ax, int ay, int bx, int by, int cx, int cy)
	{
		int pointX = 0, pointY = 0;
	    int dx = pointX - ax;
	    int dy = pointY - ay;

	    boolean bool_ab = (bx - ax) * dy - (by - ay) * dx > 0;

	    if ((cx-ax)*dy - (cy-ay)*dx > 0 == bool_ab) return false;
	    if ((cx-bx)*(0-by) - (cy-by)*(0-bx) > 0 != bool_ab) return false;
	    return true;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM662_Div2_L3_Flee obj;
		double answer;
		obj = new SRM662_Div2_L3_Flee();
		long startTime = System.currentTimeMillis();
		answer = obj.maximalSafetyLevel(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		double p2;
		
		// ----- test 0 -----
		p0 = new int[]{100,100,101};
		p1 = new int[]{50,51,52};
		p2 = 111.80339887498948D;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new int[]{1,1,-7};
		p1 = new int[]{5,-5,0};
		p2 = 5.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,1};
		p1 = new int[]{-5,-5};
		p2 = 5.0990195135927845D;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,1,-8};
		p1 = new int[]{5,-5,0};
		p2 = 5.0990195135927845D;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{232,312,-432};
		p1 = new int[]{498,-374,24};
		p2 = 432.6661530556787D;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{0};
		p1 = new int[]{0};
		p2 = 0.0D;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
