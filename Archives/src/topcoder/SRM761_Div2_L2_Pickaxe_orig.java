package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM761_Div2_L2_Pickaxe_orig
{
	boolean[][] used;
	int[][] m;
	int rows, cols;
	int[][] walls;
	
	// *** Had Stackoverflow error!, Needed to place int[][] walls outside dfs call.
	
	public int countWalls(String[] maze)
	{
		rows = maze.length;
		cols = maze[0].length();
		m = new int[rows][cols];
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				m[i][j] = (maze[i].charAt(j) == '.') ? 0 : 1;
		
		used = new boolean[rows][cols];
		walls = new int[rows][cols];
		dfs(0,0);
		int[][] rowWalls = new int[rows][cols];
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				rowWalls[i][j] = walls[i][j];

		used = new boolean[rows][cols];	
		walls = new int[rows][cols];
		dfs(rows-1,cols-1);
		
		int common = 0;
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				if (rowWalls[i][j] == 1 &&  walls[i][j] == 1)
					common++;
		return common;					
	}
	

	
	private boolean dfs(int row, int col)
	{
		if (row == rows || row == -1 || col == cols || col ==-1)
			return false;	

		if(m[row][col] == 1) {
			walls[row][col] = 1;
			return false;
		}
		if (used[row][col]) return true;
		used[row][col] = true;
		
		dfs(row, col+1);
		dfs(row, col-1);
		dfs(row+1, col);
		dfs(row-1, col);
		
		return true;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		SRM761_Div2_L2_Pickaxe_orig obj;
		int answer;
		obj = new SRM761_Div2_L2_Pickaxe_orig();
		long startTime = System.currentTimeMillis();
		answer = obj.countWalls(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"..#",".#.","#.."};
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"..##..","..##..","...#..","..##.."};
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"..##..","..##..","..##..","..##.."};
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{".....#.",".###.#.",".#.#...",".###.##",".#.#.#.",".#.###.","##....."};
		p1 = 6;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{".#####.",".#.#.#.",".#.#.#.",".#.#.#.",".#.#.#.",".#.#.#.",".#.#...",".#####."};
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{".#####.",".#.#.#.","...#.#.",".#.#.#.",".#.#.#.",".#.#.#.",".#.#...",".#####."};
		p1 = 6;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new String[]{".#","#."};
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new String[]{".##","#.#","#.."};
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
