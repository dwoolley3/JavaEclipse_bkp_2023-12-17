package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM617_Div2_L3_MyVeryLongCake
{
	public int cut(int n)
	{
		int res = n, tot = n;
		for (int i = 2; i*i <= n; i++)
			if (n % i == 0)
			{
				while (n % i == 0) n /= i;
				res = res / i * (i-1);
			}
		
		if (n > 1)
			res = res / n * (n-1);
		
		return tot - res;
		
	
//		boolean[] vis = new boolean[100008];
//		int[] p = new int[1000008];
//		int i,j,ans,tmp;
//		int num = 0;
//		for (i = 2; i <=100000; i++)
//			if (!vis[i])
//			{
//				p[num++]=i;
//				for(j=i*i;i<=1000&&j<=100000;j+=i)
//					vis[j] = true;
//			}
//		tmp=n; ans=n;
//		for(i=0;i<num;i++)
//			if (tmp%p[i]==0)
//			{
//				ans=ans-ans/p[i];
//				while(tmp%p[i]==0)
//					tmp/=p[i];
//			}
//		if(tmp!=1)
//			ans=ans-ans/tmp;
//		return n-ans;
		
		//My initial attempt:
//		ArrayList<Integer> fact = new ArrayList<Integer>();
//		for (int f = 2; f * f <= n; f++)
//			if (n%f == 0) { 
//				fact.add(f);
//				if (f * f < n)
//					fact.add(n/f);
//			}
//		Collections.sort(fact);
//		int num = fact.size();
//		if (num == 0) return 1;
//		if (num == 1) return n/fact.get(0);
//		for (int i : fact) System.out.println(i);
//		int x = n/fact.get(1) * (1 + fact.get(1)%fact.get(0));
//		return x;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		SRM617_Div2_L3_MyVeryLongCake obj;
		int answer;
		obj = new SRM617_Div2_L3_MyVeryLongCake();
		long startTime = System.currentTimeMillis();
		answer = obj.cut(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		
		// ----- test 0 -----
		p0 = 25;
		p1 = 5;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 6;
		p1 = 4;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 15;
		p1 = 7;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1000000000;
		p1 = 600000000;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 577007436;
		p1 = 384671628;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
