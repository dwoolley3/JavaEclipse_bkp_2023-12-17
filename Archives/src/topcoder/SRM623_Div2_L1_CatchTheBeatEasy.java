package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM623_Div2_L1_CatchTheBeatEasy
{
	public String ableToCatchAll(int[] x, int[] y)
	{
		String not = "Not able to catch";
		String able = "Able to catch";
		int n = x.length;
		
		for (int i = 0; i < n-1; i++)
			for (int j = i+1; j < n; j++)
				if (y[i] > y[j])
				{
					int t = y[i]; y[i] = y[j]; y[j] = t;
					t = x[i]; x[i] = x[j]; x[j] = t;
				}
		
		int sec = 0, xx = 0;
		for (int i = 0; i < n; i++)			
		{
			sec = Math.abs(xx - x[i]);
			if (sec > y[i]) return not;	
			for (int j = i+1; j < n; j++)
				y[j] -= y[i];
			xx = x[i];
		}
		return able;		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM623_Div2_L1_CatchTheBeatEasy obj;
		String answer;
		obj = new SRM623_Div2_L1_CatchTheBeatEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.ableToCatchAll(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		String p2;
		
		// ----- test 0 -----
		p0 = new int[]{-1,1,0};
		p1 = new int[]{1,3,4};
		p2 = "Able to catch";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{-3};
		p1 = new int[]{2};
		p2 = "Not able to catch";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{-1,1,0};
		p1 = new int[]{1,2,4};
		p2 = "Not able to catch";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,-1,1};
		p1 = new int[]{9,1,3};
		p2 = "Able to catch";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{70,-108,52,-70,84,-29,66,-33};
		p1 = new int[]{141,299,402,280,28,363,427,232};
		p2 = "Not able to catch";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{-175,-28,-207,-29,-43,-183,-175,-112,-183,-31,-25,-66,-114,-116,-66};
		p1 = new int[]{320,107,379,72,126,445,318,255,445,62,52,184,247,245,185};
		p2 = "Able to catch";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{0,0,0,0};
		p1 = new int[]{0,0,0,0};
		p2 = "Able to catch";
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
