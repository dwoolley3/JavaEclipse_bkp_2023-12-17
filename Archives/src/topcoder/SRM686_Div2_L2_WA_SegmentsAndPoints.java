package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM686_Div2_L2_WA_SegmentsAndPoints
{
	public String isPossible(int[] p, int[] l, int[] r)
	{
		int n = p.length;
		boolean[] usedp = new boolean[n];
		boolean[] useds = new boolean[n];
		boolean cnt1 = true;
		boolean onechange = true;
		while (onechange)
		{
			onechange = false;
			while (cnt1)
			{
				cnt1 = false;
				for (int i = 0; i < n; i++)
				{
					if (usedp[i]) continue;
					int cnt = 0, lastj = -1;
					for (int j = 0; j < n; j++)
						if (!useds[j] && p[i] >= l[j] && p[i] <= r[j])
						{
							cnt++;
							lastj = j;
						}
					if (cnt == 1)
					{
						usedp[i] = true;			
						useds[lastj] = true;
						cnt1 = true;
						onechange = true;
					}
					else if (cnt == 0) 
						return "Impossible";
				}
			}
			
			cnt1 = true;
	
			while (cnt1)
			{
				cnt1 = false;
				for (int i = 0; i < n; i++)
				{
					if (useds[i]) continue;
					int cnt = 0, lastj = -1;
					for (int j = 0; j < n; j++)
						if (!usedp[j] && p[j] >= l[i] && p[j] <= r[i])
						{
							cnt++;
							lastj = j;
						}
					if (cnt == 1)
					{
						useds[i] = true;			
						usedp[lastj] = true;
						cnt1 = true;
						onechange = true;
					}
					else if (cnt == 0) 
						return "Impossible";
				}
			}
		}
	
		return "Possible";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int[] p2, boolean hasAnswer, String p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM686_Div2_L2_WA_SegmentsAndPoints obj;
		String answer;
		obj = new SRM686_Div2_L2_WA_SegmentsAndPoints();
		long startTime = System.currentTimeMillis();
		answer = obj.isPossible(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p3 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p3);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int[] p2;
		String p3;
		
		// ----- test 2 -----
		p0 = new int[]{2,2,5,5,5};
		p1 = new int[]{0,0,0,4,4};
		p2 = new int[]{3,3,3,6,6};
		p3 = "Impossible";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,2,2,2};
		p1 = new int[]{1,1,2,2};
		p2 = new int[]{1,1,2,2};
		p3 = "Impossible";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,1,2};
		p1 = new int[]{0,3,5};
		p2 = new int[]{2,4,7};
		p3 = "Impossible";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		
		// ----- test 0 -----
		p0 = new int[]{1,2};
		p1 = new int[]{0,0};
		p2 = new int[]{1,3};
		p3 = "Possible";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{0};
		p1 = new int[]{2};
		p2 = new int[]{3};
		p3 = "Impossible";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,1,2};
		p1 = new int[]{0,0,1};
		p2 = new int[]{1,2,1};
		p3 = "Possible";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,1};
		p1 = new int[]{-1,0};
		p2 = new int[]{0,0};
		p3 = "Impossible";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{434,63,241,418,-380,-46,397,-205,-262,-282,260,-106,-389,-286,422,-75,127,382,52,-383};
		p1 = new int[]{-447,-226,-411,287,-83,-228,-390,358,422,395,-461,-112,49,75,-160,-152,372,-447,-337,-362};
		p2 = new int[]{-102,348,-70,466,168,-61,-389,469,433,471,-75,-41,52,236,299,-48,383,-353,346,-217};
		p3 = "Possible";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
