package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM790_Div2_L2_BobtheBuilder
{
	// Does not work yet. Work in Progress. Need to use a Queue
	
	public int minimumPrice(int B, int K, int H)
	{
		int max = 1_000_000;
		int INF = (int)1e9;
		int[] a = new int[max+1];
		ArrayList<Integer> fact = new ArrayList<>();
		for (int i = 1; i <= B; i++) {
			if (B%i == 0) fact.add(i);
		}
		for (int i = 0; i <= max; i++) a[i] = INF;
		//for (int i = H; i <= max; i+=H) a[i] = 0;
		
		int blksize = K; 
		for (int numblk = 0; numblk <= max; numblk++) {
			for (int i = H; i <= max; i+= H) 
			{
				int x = i - numblk * blksize;
				if (x < 0) break;
				a[x] = Math.min(a[x], numblk);
				if (x > 0) {
					int val = a[x];
					int st = x;
					while (st <= max) {
						a[st] = Math.min(a[st], val);
						st += x;
					}
				}
			}
		}		
		int ans = INF;
		for (int f: fact) {
			ans = Math.min(ans,a[f]);
		}
		if (ans == INF) ans = -1;
		
		return ans;
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		SRM790_Div2_L2_BobtheBuilder obj;
		int answer;
		obj = new SRM790_Div2_L2_BobtheBuilder();
		long startTime = System.currentTimeMillis();
		answer = obj.minimumPrice(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 65;
		p1 = 5;
		p2 = 6;
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 2;
		p2 = 2;
		p3 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 5;
		p1 = 6;
		p2 = 79;
		p3 = 13;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 94;
		p1 = 1;
		p2 = 25;
		p3 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 289;
		p1 = 5;
		p2 = 17;
		p3 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 90;
		p1 = 1;
		p2 = 82;
		p3 = 37;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 401;
		p1 = 780;
		p2 = 779;
		p3 = 30;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
