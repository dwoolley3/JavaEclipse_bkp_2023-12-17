package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM844_Div2_L3_FeedADrake
{
	// Need Dynamic Programming, or alternative
	
	public int feed(int stomach, int[] cakes, int excess)
	{
		Arrays.sort(cakes);
		int eaten = 0;
		int n = cakes.length;
		int i = 0;
		while (i < n && eaten + cakes[i] < stomach) {
			eaten += cakes[i++];
		}
		int j = n-1;
		while (j >= i && excess >= 0) {
			eaten += cakes[j--];
			excess--;
		}
		return eaten;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		SRM844_Div2_L3_FeedADrake obj;
		int answer;
		obj = new SRM844_Div2_L3_FeedADrake();
		long startTime = System.currentTimeMillis();
		answer = obj.feed(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 1234;
		p1 = new int[]{10,20,30,40};
		p2 = 0;
		p3 = 100;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 100;
		p1 = new int[]{100,100,100};
		p2 = 0;
		p3 = 100;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 101;
		p1 = new int[]{100,100,100};
		p2 = 0;
		p3 = 200;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 101;
		p1 = new int[]{100,100,100,100,100};
		p2 = 2;
		p3 = 400;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 4700;
		p1 = new int[]{1000,8000,2000,5000,3000};
		p2 = 0;
		p3 = 12000;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 100;
		p1 = new int[]{100001,100002,100003};
		p2 = 1;
		p3 = 200005;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 100;
		p1 = new int[]{1000,2000};
		p2 = 7;
		p3 = 3000;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
