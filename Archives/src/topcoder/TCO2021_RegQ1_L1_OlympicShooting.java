package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class TCO2021_RegQ1_L1_OlympicShooting
{
	public int[] sort(String[] results)
	{
		int rows = results.length;
		int cols = results[0].length();
		int rounds = cols / 25;
		int[][] score = new int[rows][rounds];
		int[] sum = new int[rows];
		int[] last1 = new int[rows];
		int[] num = new int[rows];
		for (int i = 0; i < rows; i++) num[i] = i;
		int pos = 0;
		for (int i = 0; i < rows; i++) {
			for (int r = 0; r < rounds; r++) {
				for (int j = 0; j < 25; j++) {
					pos = r*25 + j;				
					if (results[i].charAt(pos) == '1') {
						score[i][r]++;
						last1[i] = pos;
					}
				}
				sum[i] += score[i][r];
			}			
		}
		
		int t;
		for (int i = 0; i < rows-1; i++) {
			for (int j = i+1; j < rows; j++) {
				if (sum[i] < sum[j]) {
					t = sum[i]; sum[i] = sum[j]; sum[j] = t;
					t = num[i]; num[i] = num[j]; num[j] = t;
					t = last1[i]; last1[i] = last1[j]; last1[j] = t;
					for (int r = 0; r < rounds; r++) {
						t = score[i][r]; score[i][r] = score[j][r]; score[j][r] = t;
					}
					String s= results[i]; results[i] = results[j]; results[j] = s;
				} else if (sum[i] == sum[j]) {
					boolean swap = false;
					boolean equal = true;
					boolean good = false;
					for (int r2 = rounds-1; r2 >= 0 && !swap && !good; r2--) {
						equal &= (score[i][r2] == score[j][r2]);
						if (score[i][r2] < score[j][r2]) {
							t = sum[i]; sum[i] = sum[j]; sum[j] = t;
							t = num[i]; num[i] = num[j]; num[j] = t;
							t = last1[i]; last1[i] = last1[j]; last1[j] = t;
							for (int r = 0; r < rounds; r++) {
								t = score[i][r]; score[i][r] = score[j][r]; score[j][r] = t;
							}
							String s= results[i]; results[i] = results[j]; results[j] = s;
							swap = true;
						} else if (score[i][r2] > score[j][r2]) {
							good = true;
						}
					}
					if (equal && !swap && !good) {
						good = false;
						for (pos = cols-1; pos >= 0 && !swap && !good; pos--) {
							equal &= (results[i].charAt(pos) == results[j].charAt(pos));
							if (results[i].charAt(pos) == '0' && results[j].charAt(pos) == '1') {
								t = sum[i]; sum[i] = sum[j]; sum[j] = t;
								t = num[i]; num[i] = num[j]; num[j] = t;
								t = last1[i]; last1[i] = last1[j]; last1[j] = t;
								for (int r = 0; r < rounds; r++) {
									t = score[i][r]; score[i][r] = score[j][r]; score[j][r] = t;
								}
								String s= results[i]; results[i] = results[j]; results[j] = s;
								swap = true;
							} else if (results[i].charAt(pos) == '1' && results[j].charAt(pos) == '0') {
								good = true;
							}
						}
						if (equal && !good && !swap) {
							if (num[i] > num[j]) {
								t = sum[i]; sum[i] = sum[j]; sum[j] = t;
								t = num[i]; num[i] = num[j]; num[j] = t;
								t = last1[i]; last1[i] = last1[j]; last1[j] = t;
								for (int r = 0; r < rounds; r++) {
									t = score[i][r]; score[i][r] = score[j][r]; score[j][r] = t;
								}
								String s= results[i]; results[i] = results[j]; results[j] = s;
							}
						}
					}
				}
			}	
		}
		return num;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		TCO2021_RegQ1_L1_OlympicShooting obj;
		int[] answer;
		obj = new TCO2021_RegQ1_L1_OlympicShooting();
		long startTime = System.currentTimeMillis();
		answer = obj.sort(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = new String[]{"1111111111101111111111111","1111111111111111111111100","1111111111111111111110111","1111111111111111111111111","1111111111111111111110111"};
		p1 = new int[]{3,0,2,4,1};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"11111111111011111111111110000000000000000000010000","11111111111111111111111000000000000000000000001000","11111111111111111111101110000000000000000000000100","11111111111111111111111110000000000000000000000010","11111111111111111111101110000000000000000000000001"};
		p1 = new int[]{3,4,2,0,1};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"11111111111011111111111110000000000000000000000100","11111111111111111111111000000000000000000000011000","11111111111111111111101110000000000000000000000100","11111111111111111111111110000000000000000000000010","11111111111111111111101110000000000000000000000001"};
		p1 = new int[]{3,1,4,0,2};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000000000000000000"};
		p1 = new int[]{0,1,2,3,4,5};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"10000000000000000000000000000000000000000000000000","01000000000000000000000000000000000000000000000000"};
		p1 = new int[]{1,0};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"10000000000000000000000000000000000000000000000000"};
		p1 = new int[]{0};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"00000000000000000000000000000000000000000000000001","00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000000000000001000","00000000000000000000000000000000000000000000000001","00000000000000000000000000000000000000000000000010"};
		p1 = new int[]{0,4,5,3,1,2};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;

		// ----- test 3 -----
		p0 = new String[]{
				"1111111111101111111111111000000000000000000000010011111111111011111111111110000000000000000000000100",
				"1111111111111111111111100000000000000000000001100011111111111111111111111000000000000000000000011000",
				"1111111111111111111110111000000000000000000000010011111111111111111111101110000000000000000000000100",
				"1111111111111111111111111000000000000000000000001011111111111111111111111110000000000000000000000010",
				"1111111111111111111110111000000000000000000000000111111111111111111111101110000000000000000000000001",
				"1111111111101111111111111000000000000000000000010011111111111011111111111110000000000000000000000100",
				"1111111111111111111111100000000000000000000001100011111111111111111111111000000000000000000000011000",
				"1111111111111111111110111000000000000000000000010011111111111111111111101110000000000000000000000100",
				"1111111111111111111111111000000000000000000000001011111111111111111111111110000000000000000000000010",
				"1111111111111111111110111000000000000000000000000111111111111111111111101110000000000000000000000001",
				"1111111111101111111111111000000000000000000000010011111111111011111111111110000000000000000000000100",
				"1111111111111111111111100000000000000000000001100011111111111111111111111000000000000000000000011000",
				"1111111111111111111110111000000000000000000000010011111111111111111111101110000000000000000000000100",
				"1111111111111111111111111000000000000000000000001011111111111111111111111110000000000000000000000010",
				"1111111111111111111110111000000000000000000000000111111111111111111111101110000000000000000000000001",
				"1111111111101111111111111000000000000000000000010011111111111011111111111110000000000000000000000100",
				"1111111111111111111111100000000000000000000001100011111111111111111111111000000000000000000000011000",
				"1111111111111111111110111000000000000000000000010011111111111111111111101110000000000000000000000100",
				"1111111111111111111111111000000000000000000000001011111111111111111111111110000000000000000000000010",
				"1111111111111111111110111000000000000000000000000111111111111111111111101110000000000000000000000001",
				"1111111111101111111111111000000000000000000000010011111111111011111111111110000000000000000000000100",
				"1111111111111111111111100000000000000000000001100011111111111111111111111000000000000000000000011000",
				"1111111111111111111110111000000000000000000000010011111111111111111111101110000000111100000000000100",
				"1111111111111111111111111000000000000000000000001011111111111111111111111110000000000110000000000010",
				"1111111111111111111110111000000000000000000000000111111111111111111111101110000000000000000000000001",
				"1111111111101111111111111000000000000000000000010011111111111011111111111110000000000000000000110100",
				"1111111111111111111111100000000000000000000001100011111111111111111111111000000000000000000000011000",
				"1111111111111111111110111000000000000000000000010011111111111111111111101110000000000000000001000100",
				"1111111111111111111111111000000000000000000000001011111111111111111111111110000000000000000000010010",
				"1111111111111111111110111000000000000000000000000111111111111111111111101110000000000000000000000111"				
				};
		p1 = new int[]{22,23,28,29,25,3,8,13,18,27,1,6,11,16,21,26,4,9,14,19,24,0,5,10,15,20,2,7,12,17};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
