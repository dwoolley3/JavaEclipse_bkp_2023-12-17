package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM759_Div1_L1_EllysThreePrimes
{
	public int[] getPrimes(int[] sums)
	{
		int n = 99_999;
        boolean[] prime = sieve(n);
        HashSet<Integer> hs = new HashSet<>();
        	
        int pcount = 0;
        for (int i = 10_000; i <= n; i++) {
            if (prime[i]) pcount++;
        }
        
        int[] p = new int[pcount];
        int ind = 0;
        for (int i = 10_000; i <= n; i++) {
            if (prime[i])  {
            	p[ind++] = i;            	
            	hs.add(i);
            }
        }
        
        n = pcount;
        int ii, jj, kk;
		int di, dj, dk;
        for (int i = 0; i < n; i++)
        	for (int j = i+1; j < n; j++) {
    			ii = p[i];
    			jj = p[j];
    			boolean ok = true;
    			kk = 0;
    			int pow = 1;
    			for (int m = 0; m < 5 && ok; m++) {
    				di = ii % 10;
    				dj = jj % 10;
    				dk = sums[m] - di - dj;
    				if (dk < 0 || dk > 9) ok = false;
    				ii /= 10;
    				jj /= 10;
    				kk += dk * pow;
    				pow *= 10;  // Don't use Math.pow() for performance
    			}
    			if (ok && hs.contains(kk) && p[i] != kk && p[j] != kk) {
    				return new int[] {p[i], p[j], kk};
    			}
    		}
         // 8,363 primes

        return new int[0];
	}
	
    boolean[] sieve(int n)
    {
        //Return all primes between 0 and n using Sieve of Eratosthenes
    	boolean[] prime = new boolean[n + 1];
    	Arrays.fill(prime, true);
        prime[0] = false;
        prime[1] = false;
        for (int i = 2; i * i <= n; i++)
            if (prime[i])
                for (int k = i * i; k <= n; k += i)
                    prime[k] = false;
        return prime;
    }
	
    boolean[] sieve2(int n)
    {
    	boolean[] prime = new boolean[n + 1];
    	Arrays.fill(prime, true);
    	for (int i = 1; i <= n; i++)
    		prime[i] = isPrime(i);
        return prime;
    }
    
    boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i * i <= n; i++)
            if (n % i == 0) return false;
       return true;
    }
    
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM759_Div1_L1_EllysThreePrimes obj;
		int[] answer;
		obj = new SRM759_Div1_L1_EllysThreePrimes();
		long startTime = System.currentTimeMillis();
		answer = obj.getPrimes(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = new int[]{19,12,15,11,14};
		p1 = new int[]{20533,87119,44987};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{22,19,3,8,23};
		p1 = new int[]{};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{13,17,0,25,20};
		p1 = new int[]{27011,99083,99089};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{11,12,13,14,15};
		p1 = new int[]{47221,23789,94421};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{14,27,6,12,15};
		p1 = new int[]{};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{17,26,26,26,5};
		p1 = new int[]{};
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
