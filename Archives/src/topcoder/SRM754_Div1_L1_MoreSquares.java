package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM754_Div1_L1_MoreSquares
{
	public int countLocations(int N, int SX, int SY, int[] Xprefix, int[] Yprefix)
	{
		int L = Xprefix.length;
		int[] x = new int[N];
		int[] y = new int[N];
		for (int i = 0; i < L; i++) {
			x[i] = Xprefix[i];
			y[i] = Yprefix[i];
		}
		for (int i = L; i < N; i++) {
			x[i] = (x[i-1] * 47 + 42) % SX;
			y[i] = (y[i-1] * 47 + 42) % SY;
		}
		
		ArrayList<Integer> x2 = new ArrayList<>();
		ArrayList<Integer> y2 = new ArrayList<>();
		for (int i = 0; i < N; i++) {
			int ind = x2.indexOf(x[i]);
			if (ind > -1 && y2.get(ind) == y[i]) continue;
			x2.add(x[i]);
			y2.add(y[i]);
		}
		int numS = x2.size();		
		int inc = 0;
		
		
		System.out.println(x2);
		System.out.println(y2);
		System.out.println(x2.size());
		
		long[][] d = new long[numS][numS];
		for (int i = 0; i < numS - 1; i++) {
			for (int j = i+1; j < numS; j++) {
				d[i][j] = dist(x[i],y[i], x[j],y[j]);
			}
		}
	
		//Square has two sides the same length and the diagonal distance
		// is 2 times the side length
		// 4th point is (x1 ^ x2 ^ x3, y1 ^ y2 ^ y3). 
		// For each of x and y, you've got two coordinates the same, 
		// and a different one. Xor'ing them together causes the pair
		// of coordinates that are the same to cancel. This works whatever
		// units you're using for the square.
		// For example: given (10, 20), (50, 30), (10, 30) 
		// you get (10^50^10, 20^30^30) which is (50, 20).		
		
		return inc;
	}
	
	
	private long dist(int x1, int y1, int x2, int y2) {
		return 1L * (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int[] p3, int[] p4, boolean hasAnswer, int p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p4.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p4[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM754_Div1_L1_MoreSquares obj;
		int answer;
		obj = new SRM754_Div1_L1_MoreSquares();
		long startTime = System.currentTimeMillis();
		answer = obj.countLocations(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p5);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p5;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int[] p3;
		int[] p4;
		int p5;
		
		// ----- test 0 -----
		p0 = 3;
		p1 = 100;
		p2 = 100;
		p3 = new int[]{3,0,2};
		p4 = new int[]{0,1,2};
		p5 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 5;
		p1 = 100;
		p2 = 100;
		p3 = new int[]{47,47,47,47,47};
		p4 = new int[]{47,47,47,47,47};
		p5 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 23;
		p1 = 11;
		p2 = 13;
		p3 = new int[]{7};
		p4 = new int[]{0};
		p5 = 5;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 3000;
		p1 = 1000000;
		p2 = 999999;
		p3 = new int[]{7};
		p4 = new int[]{0};
		p5 = 5;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 5;
		p1 = 1000000;
		p2 = 999999;
		p3 = new int[]{1,1,2,2,3};
		p4 = new int[]{1,2,1,3,3};
		p5 = 1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 3000;
		p1 = 1000000;
		p2 = 999999;
		p3 = new int[]{7};
		p4 = new int[]{0};
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, false, p5) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 5;
		p1 = 1000000;
		p2 = 999999;
		p3 = new int[]{1,1,2,2,3};
		p4 = new int[]{1,2,1,3,3};
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, false, p5) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
