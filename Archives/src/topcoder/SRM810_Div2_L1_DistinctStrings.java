package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM810_Div2_L1_DistinctStrings
{
	public String[] generate(int L, String letters, int N)
	{
		String[] s = new String[N];
		int len = letters.length();
		HashSet<String> hs = new HashSet<>();
		for (int i = 0; i < N; i++) {
			StringBuilder sb = new StringBuilder();
			for (int j = 0; j < L; j++) {
				int r = (int)(Math.random()*len);
				sb.append(letters.charAt(r));
			}
			String password = sb.toString();
			if (!hs.contains(password)) {
				hs.add(password);
				s[i] = password;
			} else {
				i--;
			}
		}
		return s;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, String p1, int p2, boolean hasAnswer, String[] p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "\"" + p1 + "\"" + "," + p2);
		System.out.println("]");
		SRM810_Div2_L1_DistinctStrings obj;
		String[] answer;
		obj = new SRM810_Div2_L1_DistinctStrings();
		long startTime = System.currentTimeMillis();
		answer = obj.generate(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p3.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p3[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p3.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p3[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		String p1;
		int p2;
		String[] p3;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = "qwertyuiopasdfghjklzxcvbnm";
		p2 = 10;
		p3 = new String[]{"hello","abcde","wwwww","coins","coder","digit","clash","qwert","puppy","kitty"};
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = "ABCDE02468";
		p2 = 17;
		p3 = new String[]{"ABC","D2E","DDD","AAA","EEE","024","042","204","240","402","420","4AB","4EE","E4E","ED4","868","844"};
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 8;
		p1 = "cdeopPrRtT";
		p2 = 4;
		p3 = new String[]{"topcoder","Topcoder","docopTer","receptor"};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = "cdeopPrRtT";
		p2 = 200;
		p3 = new String[]{"topcoder","Topcoder","docopTer","receptor"};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
