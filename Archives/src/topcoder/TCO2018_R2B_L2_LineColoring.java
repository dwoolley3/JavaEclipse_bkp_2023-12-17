package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class TCO2018_R2B_L2_LineColoring
{
	public int minCost(int[] x)
	{
		int n = x.length;
		if (n == 1) return x[0];
		
		int[] a = new int[3]; 
		for (int i = 0; i < n; i++) {
			a[i%2] = Math.max(a[i%2], x[i]);
		}
		int min = a[0] + a[1];
		int best = min;
		
		for (int ex = 0; ex < n; ex ++) {
			a = new int[3]; 
			for (int i = 0; i < n; i++) {
				if (i == ex) a[2] = x[i];
				else if (i < ex)
					a[i%2] = Math.max(a[i%2], x[i]);
				else //i > ex
					a[(i+1)%2] = Math.max(a[(i+1)%2], x[i]);
			}
			min = a[0] + a[1] + a[2];
			if (min < best) best = min;
		}
		
		return best;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		TCO2018_R2B_L2_LineColoring obj;
		int answer;
		obj = new TCO2018_R2B_L2_LineColoring();
		long startTime = System.currentTimeMillis();
		answer = obj.minCost(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{1,2,3,4,5,6,7,8,9};
		p1 = 17;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{7,6,5,4,3,2,1};
		p1 = 13;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,2,1,2};
		p1 = 3;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,10,1,1,1,1,10};
		p1 = 12;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
		p1 = 33;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1000000};
		p1 = 1000000;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{9450,7098,6048,1050,672,8232,5028,672,672,42,42,42,42,42,9450,6048,3402,3402,2688,9450,7098,6048,1050,672,8232,5028,672,672,9450,6048,3402};
		p1 = 18900;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,10,1,1,1,1,1,10};
		p1 = 11;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,10,1,1,1,1,10,2,1,10,1,2,10};
		p1 = 13;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
