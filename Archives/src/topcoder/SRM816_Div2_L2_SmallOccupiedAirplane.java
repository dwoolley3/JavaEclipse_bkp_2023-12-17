package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM816_Div2_L2_SmallOccupiedAirplane
{
	public String[] seat(int R, int[] groups)
	{
		boolean[][] s = new boolean[R][6];
		String letters = "ABCDEF";
		int totalSeats = 0;
		for (int g : groups) totalSeats += g;
		String[] ans = new String[totalSeats];	
		int ind = 0;
		
		for (int g : groups) {
			if (g > 1) {
				for (int r = 0; r < R && g > 0; r++) {
					int canPlace = 0;
					for (int j = 0; j < 6; j++) {
						if (!s[r][j]) canPlace++;
					}
					if (canPlace >= g) {
						int placed = 0;
						for (int j = 0; j < 6 && placed < g; j++) {
							if (!s[r][j]) {
								s[r][j] = true;
								ans[ind++] = "" + (r+1) + letters.charAt(j);
								placed++;
							}
						}
						g = 0;					
					}
				}
			}
			for (int i = 0; i < g; i++) {
				boolean placed = false;
				for (int r = 0; r < R && !placed; r++) {
					if (!s[r][0]) {
						s[r][0] = true;
						ans[ind++] = "" + (r+1) + letters.charAt(0);
						placed = true;
					} else if (!s[r][5]) {
						s[r][5] = true;
						placed = true;
						ans[ind++] = "" + (r+1) + letters.charAt(5);					
					}
				}	
				for (int r = 0; r < R && !placed; r++) {
					if (!s[r][2]) {
						s[r][2] = true;
						placed = true;
						ans[ind++] = "" + (r+1) + letters.charAt(2);
					} else if (!s[r][3]) {
						s[r][3] = true;
						placed = true;
						ans[ind++] = "" + (r+1) + letters.charAt(3);
					}
				}	
				for (int r = 0; r < R && !placed; r++) {
					if (!s[r][1]) {
						s[r][1] = true;
						placed = true;
						ans[ind++] = "" + (r+1) + letters.charAt(1);
					} else if (!s[r][4]) {
						s[r][4] = true;
						placed = true;
						ans[ind++] = "" + (r+1) + letters.charAt(4);
					}
				}	
			}
		}
		
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, String[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM816_Div2_L2_SmallOccupiedAirplane obj;
		String[] answer;
		obj = new SRM816_Div2_L2_SmallOccupiedAirplane();
		long startTime = System.currentTimeMillis();
		answer = obj.seat(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p2[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p2[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		String[] p2;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = new int[]{1,1,4};
		p2 = new String[]{"1A","1F","1B","1C","1D","1E"};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = new int[]{2,1};
		p2 = new String[]{"1A","1B","1F"};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = new int[]{1,1,1,3};
		p2 = new String[]{"1A","1F","1C","1B","1D","1E"};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 2;
		p1 = new int[]{1,1,1,5};
		p2 = new String[]{"1A","1F","2A","2B","2C","2D","2E","2F"};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 2;
		p1 = new int[]{1,1,1,1,1,5};
		p2 = new String[]{"1A","1F","2A","2F","1C","1D","2C","2D","1B","1E"};
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 3;
		p1 = new int[]{4,4,4,1,2,1,1,1};
		p2 = new String[]{"1A","1B","1C","1D","2A","2B","2C","2D","3A","3B","3C","3D","1F","2E","2F","3F","1E","3E"};
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 12;
		p1 = new int[]{};
		p2 = new String[]{};
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
