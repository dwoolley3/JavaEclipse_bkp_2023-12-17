package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM742_Div1_L1_ResistorFactory
{
	public int[] construct(long nanoOhms)
	{
		double ohm = nanoOhms / 1_000_000_000.0;

		ArrayList<Integer> al = new ArrayList<>();
		ArrayList<Double> val = new ArrayList<>();
		double pow2 = 1.0;	
		val.add(pow2);
		for (int i = 0; i < 30; i++) {
			al.add(i);
			al.add(i);
			al.add(0);
			pow2 *= 2;
			val.add(pow2);
		}
		int prev = 0;
		pow2 = 1.0;		
		for (int i = 0; i < 30; i++) {
			al.add(prev);
			al.add(prev);
			al.add(1);
			prev = val.size();
			pow2 /= 2;
			val.add(pow2);
		}		
		
		for (int i = 30; i >= 0; i--) {
			if (ohm >= val.get(i)) {
				al.add(val.size()-1);
				al.add(i);
				al.add(0);
				val.add(0.0);  //Any val, to keep pos
				ohm -= val.get(i);
			}
		}
		
		for (int i = 0; i < 30; i++) {
			int pos = 30 + 1 + i;
			if (ohm >= val.get(pos)) {
				al.add(val.size()-1);
				al.add(pos);
				al.add(0);
				val.add(0.0);  //Any val, to keep pos
				ohm -= val.get(pos);
			}
		}
		
		int[] ans = new int[al.size()];
		for (int i = 0; i < al.size(); i++) {
			ans[i] = al.get(i);
		}

		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, long p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		SRM742_Div1_L1_ResistorFactory obj;
		int[] answer;
		obj = new SRM742_Div1_L1_ResistorFactory();
		long startTime = System.currentTimeMillis();
		answer = obj.construct(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		long p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = 3000000000L;
		p1 = new int[]{0,0,0,0,1,0};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 1200000000L;
		p1 = new int[]{0,0,0,1,0,0,1,2,1};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1428571428L;
		p1 = new int[]{0,0,0,0,1,0,1,2,0,3,1,1};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 12000000001L;
		p1 = new int[]{0,0,0,0,1,0,2,2,0,3,3,0};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 333333333L;
		p1 = new int[]{0,0,1,0,1,1};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
