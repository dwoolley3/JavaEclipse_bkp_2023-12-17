package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM626_Div1_L1_FixedDiceGameDiv1_bySomeoneElse
{
	public double getExpectation(int a, int b, int c, int d)
	{
		if (a*b <= c) return -1;
		double[] aliceExp = calcExp(a,b);
		double[] bobExp = calcExp(c,d);
		double[] bobsSum = new double[bobExp.length];

		for (int i = 1; i < bobsSum.length; i++)
			bobsSum[i] = bobsSum[i-1]+bobExp[i];
		
		double upper = 0D;
		for (int i = c+1; i <= a*b; i++)
			if (i-1 < bobsSum.length)
				upper += i * aliceExp[i] * bobsSum[i-1];
			else
				upper += i * aliceExp[i];
		
		double lower = 0D;
		for (int i = c+1; i <= a*b; i++)
			if (i-1 < bobsSum.length)
				lower += aliceExp[i] * bobsSum[i-1];
			else
				lower += aliceExp[i];
		
		return upper / lower;
	}
	
	private double[] calcExp(int num, int sides) {
		double[] result = new double[num * sides + 1];
		
		for (int i = 0; i < sides; i++)
			result[i+1] = 1D / sides;
		
		for (int i = 1; i < num; i++) {
			double[] priv = result;
			result = new double[num * sides + 1];
			
			for (int j = 0; j < result.length; j++) {
				if (priv[j] > 0) {
					for (int k = 0; k < sides; k++)
						result[j+k+1] += priv[j] * (1D/sides);
				}
			}
		}
		return result;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, double p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		SRM626_Div1_L1_FixedDiceGameDiv1_bySomeoneElse obj;
		double answer;
		obj = new SRM626_Div1_L1_FixedDiceGameDiv1_bySomeoneElse();
		long startTime = System.currentTimeMillis();
		answer = obj.getExpectation(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		double p4;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 2;
		p2 = 1;
		p3 = 5;
		p4 = 2.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 1;
		p2 = 1;
		p3 = 3;
		p4 = 3.0D;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = 5;
		p2 = 1;
		p3 = 1;
		p4 = 3.4999999999999996D;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 2;
		p1 = 6;
		p2 = 50;
		p3 = 30;
		p4 = -1.0D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 50;
		p1 = 11;
		p2 = 50;
		p3 = 50;
		p4 = 369.8865999182022D;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
