//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class x_TCPhoneHome
{
	public long validNumbers(int digits, String[] specialPrefixes)
	{
		int n = specialPrefixes.length;
		
		long[] pow10 = new long[digits+1];
		pow10[0] = 1;
		for (int i = 1; i <= digits; i++) 
			pow10[i] = pow10[i-1] * 10;
		
//		for (int i = 1; i <= digits; i++) 
//			pow10[i] = (long)Math.pow(10, i);
		
		long ans = pow10[digits];
		
		for (int i = 0; i < n; i++)
		{
			boolean unique = true;		
			for (int j = 0; j < n && unique; j++)
			{
				if (i == j) continue;
				if (specialPrefixes[i].startsWith(specialPrefixes[j]))
					unique = false;				
			}
			if (unique)
				ans -= pow10[digits - specialPrefixes[i].length()];
		}
		return ans;
	}
		
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, String[] p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		x_TCPhoneHome obj;
		long answer;
		obj = new x_TCPhoneHome();
		long startTime = System.currentTimeMillis();
		answer = obj.validNumbers(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		String[] p1;
		long p2;
		
		// ----- test 0 -----
		p0 = 7;
		p1 = new String[]{"0","1","911"};
		p2 = 7990000L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = new String[]{"0","1","911"};
		p2 = 7990000000L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 8;
		p1 = new String[]{"1","12","123"};
		p2 = 90000000L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 9;
		p1 = new String[]{"12","13","14"};
		p2 = 970000000L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 3;
		p1 = new String[]{"411"};
		p2 = 999L;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		p0 = 1;
		p1 = new String[]{};
		p2 = 10L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		p0 = 17;
		p1 = new String[]{};
		p2 = 100000000000000000L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 8;
		p1 = new String[]{"123","12","1"};
		p2 = 90000000L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
