package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM795_Div2_L1_DivideLoot
{
	public String verify(int N, int[] loot)
	{
		int sum = 0;
		int[] a = new int[1005];
		for (int x : loot) {
			a[x]++;
			sum += x;
		}
		if (sum % N == 0) {
			int pir = 0;
			int ave = sum / N;
			for (int x : loot) {
				if (a[x] > 0) {
					if (x == ave) { 
						pir++;
						a[x]--;
					} else {
						int y = ave - x;
						if (y > 0 && y < 1001 && a[y] > 0) {
							a[x]--;
							a[y]--;
							pir++;
						} else {
							return "impossible";
						}
					}				
				}
			}
			if (pir == N) {
				return "possible";
			}
		}
		return "impossible";			
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM795_Div2_L1_DivideLoot obj;
		String answer;
		obj = new SRM795_Div2_L1_DivideLoot();
		long startTime = System.currentTimeMillis();
		answer = obj.verify(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		String p2;
		
		// ----- test 2 -----
		p0 = 3;
		p1 = new int[]{3,9,10,7,1};
		p2 = "possible";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 1;
		p1 = new int[]{47};
		p2 = "possible";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = new int[]{10,8,10,1,1};
		p2 = "impossible";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = new int[]{3,9,10,7,1};
		p2 = "possible";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 6;
		p1 = new int[]{1,1,1,2,1,1,1,1,1,1,1};
		p2 = "possible";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 2;
		p1 = new int[]{40,1,42};
		p2 = "impossible";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 3;
		p1 = new int[]{1,1,3,1};
		p2 = "impossible";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 2;
		p1 = new int[]{42,42};
		p2 = "possible";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
