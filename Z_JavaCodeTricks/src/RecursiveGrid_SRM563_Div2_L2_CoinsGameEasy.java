//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class RecursiveGrid_SRM563_Div2_L2_CoinsGameEasy
{
    int[] dx = {1, 0, -1, 0};
    int[] dy = {0, 1, 0, -1};
    int[] coinx = new int[2];
    int[] coiny = new int[2];
    String[] bd;
    int r, c, totSteps = 11;
    
	public int minimalSteps(String[] board)
	{
        r = board.length;      //height
        c = board[0].length(); //width
        bd = board;

        int num = 0;
        for (int i = 0; i < r; i++)
            for (int j = 0; j < c; j++)
                if (board[i].charAt(j) == 'o')
                {
                    coinx[num] = i;
                    coiny[num] = j;
                    num++;
                }

        move(coinx[0], coiny[0], coinx[1], coiny[1], 0);
        if (totSteps == 11) return -1;
        return totSteps;
	}
	
    private void move(int cx1, int cy1, int cx2, int cy2, int curStep)
    {
        if (curStep > 10) return;
        if (isOff(cx1, cy1) && isOff(cx2, cy2)) return;
        if (isOff(cx1, cy1) || isOff(cx2, cy2))
        {
            totSteps = Math.min(totSteps, curStep);
            return;
        }

        curStep++;
        int nx1, ny1, nx2, ny2;
        for (int i = 0; i < 4; i++)
        {
            nx1 = cx1 + dx[i];
            ny1 = cy1 + dy[i];
            if (!isOff(nx1, ny1) && bd[nx1].charAt(ny1) == '#')
            {
                nx1 = cx1;
                ny1 = cy1;
            }

            nx2 = cx2 + dx[i];
            ny2 = cy2 + dy[i];
            if (!isOff(nx2, ny2) && bd[nx2].charAt(ny2) == '#')
            {
                nx2 = cx2;
                ny2 = cy2;
            }

            move(nx1, ny1, nx2, ny2, curStep);
        }
    }
    
    private boolean isOff(int x, int y)
    {
        return (x < 0 || x >= r || y < 0 || y >= c);
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		RecursiveGrid_SRM563_Div2_L2_CoinsGameEasy obj;
		int answer;
		obj = new RecursiveGrid_SRM563_Div2_L2_CoinsGameEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.minimalSteps(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"oo"};
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{".#",".#",".#","o#","o#","##"};
		p1 = 4;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"..","..","..","o#","o#","##"};
		p1 = 3;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"###",".o.","###",".o.","###"};
		p1 = -1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"###",".o.","#.#",".o.","###"};
		p1 = 3;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"###########","........#o#","###########",".........o#","###########"};
		p1 = 10;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new String[]{"############",".........#o#","############","..........o#","############"};
		p1 = -1;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
