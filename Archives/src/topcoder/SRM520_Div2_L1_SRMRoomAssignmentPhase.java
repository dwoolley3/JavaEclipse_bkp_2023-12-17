package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM520_Div2_L1_SRMRoomAssignmentPhase
{
	public int countCompetitors(int[] ratings, int K)
	{
        int n = ratings.length;
        int myRating = ratings[0];
        Arrays.sort(ratings);
        //Arrays.Reverse(ratings);
        for (int i = 0; i < n; i++)
        {
        	int t = ratings[i]; ratings[i] = ratings[n-i-1]; ratings[n-i-1] = t;
        }

        int myRoom = 0; ;
        for (int i = 0; i < n; i++)
        {
            if (ratings[i] == myRating) 
            {
                //return i / K;   // Quick answer, if desired
                myRoom = (i+1) % K; break;
            }
        }

        int r, count = 0;
        for (int i = 0; i < n; i++)
        {
            r = (i+1) % K;
            if (r == myRoom) 
            {
               if (ratings[i] > myRating) 
                   count++;
            }
        }

        return count;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		SRM520_Div2_L1_SRMRoomAssignmentPhase obj;
		int answer;
		obj = new SRM520_Div2_L1_SRMRoomAssignmentPhase();
		long startTime = System.currentTimeMillis();
		answer = obj.countCompetitors(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{491,981,1199,763,994,879,888};
		p1 = 3;
		p2 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1024,1000,600};
		p1 = 1;
		p2 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{505,679,900,1022};
		p1 = 2;
		p2 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{716,58,1000,1004,912,822,453,1100,558};
		p1 = 3;
		p2 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{422,623,1023,941,882,776,852,495,803,622,618,532,751,500};
		p1 = 4;
		p2 = 3;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1197,1198,1196,1195,1199};
		p1 = 1;
		p2 = 2;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
