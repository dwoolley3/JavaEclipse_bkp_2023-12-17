package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM609_Div2_L2_orig_PackingBallsDiv2
{
	public int minPacks(int R, int G, int B)
	{
		int cnt = Math.min(R, Math.min(G,B));
		R-= cnt; G-=cnt; B-=cnt;
		
		int c1, c2;
		if (R==0)
		{
			c1 = G / 3;
			G %= 3;
			c2 = B / 3;
			B %= 3;
			cnt += (c1 + c2);
			if (G==1 && B<=1) cnt++;
			else if (G<=1 && B==1) cnt++;
			else 
			{
				if (G > 0) cnt++;
				if (B > 0) cnt++;
			}
		}
		else if (G == 0)
		{
			c1 = R / 3;
			R %= 3;
			c2 = B / 3;
			B %= 3;
			cnt += (c1 + c2);
			if (R==1 && B<=1) cnt++;
			else if (R<=1 && B==1) cnt++;
			else 
			{
				if (R > 0) cnt++;
				if (B > 0) cnt++;
			}
		}
		else if (B == 0)
		{
			c1 = G / 3;
			G %= 3;
			c2 = R / 3;
			R %= 3;
			cnt += (c1 + c2);
			if (G==1 && R<=1) cnt++;
			else if (G<=1 && R==1) cnt++;
			else 
			{
				if (G > 0) cnt++;
				if (R > 0) cnt++;
			}
		}
		return cnt;		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		SRM609_Div2_L2_orig_PackingBallsDiv2 obj;
		int answer;
		obj = new SRM609_Div2_L2_orig_PackingBallsDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.minPacks(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 4;
		p2 = 2;
		p3 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 3;
		p1 = 5;
		p2 = 3;
		p3 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 5;
		p2 = 2;
		p3 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 4;
		p1 = 2;
		p2 = 4;
		p3 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 1;
		p1 = 7;
		p2 = 1;
		p3 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 2;
		p1 = 3;
		p2 = 5;
		p3 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 78;
		p1 = 53;
		p2 = 64;
		p3 = 66;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100;
		p1 = 100;
		p2 = 100;
		p3 = 100;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
