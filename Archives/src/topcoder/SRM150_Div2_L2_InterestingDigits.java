package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM150_Div2_L2_InterestingDigits
{
	public int[] digits(int baseNum)
	{
		int cnt = 0;
        int[] dig = new int[30];
        for (int d = 2; d < baseNum; d++)
        {
            int max = baseNum * baseNum * baseNum;
            boolean good = true;
            for (int n = d; n < max; n += d)
            {
                if (!convert(n, baseNum, d))
                {
                    good = false;
                    break;
                }
            }
            if (good)
                dig[cnt++] = d;
        }
        int[] dig2 = new int[cnt];
        for (int j = 0; j < cnt; j++)
            dig2[j] = dig[j];
        return dig2;
	}

    private boolean convert(int n, int baseNum, int d)
    {
        int sum = 0;
        for (int i = 0; i < 3; i++)
        {
            int dig = n % baseNum;
            sum += dig;
            n /= baseNum;
        }
        if (sum % d != 0) return false;
        return true;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		SRM150_Div2_L2_InterestingDigits obj;
		int[] answer;
		obj = new SRM150_Div2_L2_InterestingDigits();
		long startTime = System.currentTimeMillis();
		answer = obj.digits(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = 10;
		p1 = new int[]{3,9};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = new int[]{2};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 9;
		p1 = new int[]{2,4,8};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 26;
		p1 = new int[]{5,25};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 30;
		p1 = new int[]{29};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
