package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM627_Div1_L1_HappyLetterDiv1
{
	public String getHappyLetters(String letters)
	{
		int[] a = new int[26];

		String s = "";
		for (char c = 'a'; c <= 'z'; c++)
		{
			for (int i = 0; i <= 25; i++) a[i] = 0;
			for (char c2 : letters.toCharArray())			
				a[c2-'a']++;			
			if (a[c-'a'] == 0) continue;
			
			int m1 = 1, m1i = -1, m2 = 1, m2i = -1;
			while (m1 > 0 && m2 > 0)
			{
				m1 = -1; m2 = -1;
				for (int i = 0; i < 26; i++)
				{
					if (i == (c-'a')) continue;
					if (a[i] > m1)
					{
						m2 = m1; m2i = m1i;
						m1 = a[i]; m1i = i;						
					}
					else if (a[i] > m2)
					{
						m2 = a[i]; m2i = i;					
					}
				}
				if (m1 > 0 && m2 > 0)
				{
					a[m1i]--;
					a[m2i]--;
				}
			}
			boolean ok = true;
			for (char ch1 = 'a'; ch1 <= 'z'; ch1++)
			{
				if (c == ch1) continue;
				
				for (int i = 0; i < 26; i++)
					if (i != (c-'a') && a[c-'a'] <= a[i]) ok = false;				
			}
			if (ok) s += c;
		}
		return s;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		SRM627_Div1_L1_HappyLetterDiv1 obj;
		String answer;
		obj = new SRM627_Div1_L1_HappyLetterDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.getHappyLetters(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		
		
		// ----- test 0.1 ----- 3a,4b,7c
		p0 = "aabbacccccccbb";
		p1 = "c";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0.1 ----- 3a,3b,6c
		p0 = "aabbaccccccb";
		p1 = "c";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0.2 ----- 1a,2b,1z
		p0 = "zabb";
		p1 = "b";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		
		// ----- test 0 -----
		p0 = "aabbacccc";
		p1 = "abc";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "aaaaaaaccdd";
		p1 = "a";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "ddabccadb";
		p1 = "abcd";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "aaabbb";
		p1 = "";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "rdokcogscosn";
		p1 = "cos";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
