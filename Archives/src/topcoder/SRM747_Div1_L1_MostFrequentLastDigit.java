package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM747_Div1_L1_MostFrequentLastDigit
{
	public int[] generate(int n, int d)
	{
		int[] ans = new int[n];
		
		int start = 0;
		if (d%2 == 0) {
			if (d == 0) start = 5;
			else if (d == 2) start = 6;
			else if (d == 4) start = 7;
			else if (d == 6) start = 8;
			else if (d == 8) start = 9;
			for (int i = 0; i < n; i++)
				ans[i] = start + i*10;
		}
		else {
			int s1 = 0, s2 = 0;
			if (d == 1) {
				s1 = 5;
				s2 = 6;
			}
			else if (d == 3) {
				s1 = 1;
				s2 = 2;
			} else if (d == 5) {
				s1 = 2;
				s2 = 3;
			}
			else if (d == 7) {
				s1 = 3;
				s2 = 4;
			}
			else if (d == 9) {
				s1 = 4;
				s2 = 5;
			}				
			for (int i = 0; i < n; i++) {
				if (i%2 == 0)
					ans[i] = s1 + i*10;
				else
					ans[i] = s2 + i*10;
			}
		}
		//throw new RuntimeException();
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		SRM747_Div1_L1_MostFrequentLastDigit obj;
		int[] answer;
		obj = new SRM747_Div1_L1_MostFrequentLastDigit();
		long startTime = System.currentTimeMillis();
		answer = obj.generate(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int[] p2;
		
		// ----- test 0 -----
		p0 = 4;
		p1 = 7;
		p2 = new int[]{1,6,13,4};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = 8;
		p2 = new int[]{44,444};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 7;
		p1 = 2;
		p2 = new int[]{109,22,74,23,29,9,1003};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 7;
		p1 = 1;
		p2 = new int[]{5,16,25,36,45,56,65};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
