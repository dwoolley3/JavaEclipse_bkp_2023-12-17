package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM776_Div1_L1_IterateOverACube
{
	long t(long n, long k) {
		if (0 <= k && k < n)
			return (k+2) * (k+1) / 2;
		if (n - 3 < k && k < 2 * n)
			return (9*n-3 * n * n + 6 * k * n - 6 * k - 2 * k * k -4) / 2;
		return t(n, 3*n - 3 - k);
	}
	
	long t2(long n, long k) {
		return 1 + Math.min(2 * n - 2 - k,  k);
	}
	
	long ch(int n) {
		if (n < 2) return 0;
		return 1L * n * (n-1) >> 1;
	}
	
	//public int[] findCell(int N, long index)
	public int[] findCell(int n, long m)
	{
		for (int s = 0; s < (int)(3*n-2); s++) {
			long z = ch(s+2) - 3 * ch(s+2-n) + 3 * ch(s+2-2*n);
			if (z <= m)
				m-= z;
			else {
				for (int a = Math.max(0, s-(n-1)*2); a < Math.min(s+1, n); a++) {
					int mn = Math.max(0,  s-a-(n-1));
					int mx = Math.min(n-1,  s-a);
					z = mx - mn + 1;
					if (z <= m)
						m-= z;
					else
						return new int[] {a, (int)(mn+m), (int)(s-a-(mn+m))};
				}
			}
		}
			
		return new int[] {};
//		long curr = 0;
//		int sum = 0;
//		for (long i = 0; i <= 3 * N - 3; i++) {
//			long ex = t(N,i);
//			if (curr + ex <= index) {
//				curr += ex;
//				sum++;				
//			} else
//				break;
//		}
//		int x = 0;
//		int lim = Math.min(N-1,  sum);
//		for (int i = 0; i <= lim; i++) {
//			if (i + 2 * N - 2 < sum) {
//				x++;
//				continue;
//			}
//			long ex = t2(N,sum-i);
//			if (curr + ex <= index) {
//				curr += ex;
//				x++;
//			} else
//				break;
//		}
//		int y = 0;
//		lim = Math.min(N-1, sum - x);
//		for (int i = 0; i <= lim; i++) {
//			if (i+N-1 < sum-x) {
//				y++;
//				continue;
//			}
//			if (curr + 1 <= index) {
//				curr++;
//				y++;
//			} else
//				break;
//		}
//		
//		int[] ret = new int[3];
//		ret[0] = x;
//		ret[1] = y;
//		ret[2] = sum - (x+y);
//		return ret;
	}
	
//	private void generateNums(int N) {
//		int ind = 0;
//		for (int sum = 0; sum <= 3 * N - 3; sum++) {
//			for (int x = 0; x <= N-1; x++) {
//				for (int y = 0; y <= N-1; y++) {
//					for (int z = 0; z <= N-1; z++) {
//						if (x + y + z == sum) {
//							System.out.println(ind++ + " " + x + " " + y + " " + z);
//						}
//					}
//				}
//			}
//		}
//	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, long p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		SRM776_Div1_L1_IterateOverACube obj;
		int[] answer;
		obj = new SRM776_Div1_L1_IterateOverACube();
		long startTime = System.currentTimeMillis();
		answer = obj.findCell(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		long p1;
		int[] p2;
		
		// ----- test 0 -----
		p0 = 3;
		p1 = 9L;
		p2 = new int[]{2,0,0};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 10L;
		p2 = new int[]{0,1,2};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 4747;
		p1 = 106968940722L;
		p2 = new int[]{4746,4746,4746};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 4;
		p1 = 32L;
		p2 = new int[]{0,2,3};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 100;
		p1 = 994331L;
		p2 = new int[]{92,90,84};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1000000;
		p1 = 512345678901234567L;
		p2 = new int[]{857461,282243,376757};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1000000;
		p1 = 0L;
		p2 = new int[]{0,0,0};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
