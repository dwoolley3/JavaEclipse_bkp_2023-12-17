package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class TCO2018_R2B_L1_SubarrayAverages
{
	public double[] findBest(int[] arr)
	{
		int n = arr.length;
		double[] d = new double[n];
		int st = 0, en = 0;
		while (st < n) {
			double ave = 0, min = Double.MAX_VALUE;
			int sum = 0;
			for (int i = st; i < n; i++) {
				sum += arr[i];
				ave = 1.0 * sum / (i - st + 1);
				if (ave < min) {
					min = ave;
					en = i;
				}			
			}
			for (int i = st; i <= en; i++)
				d[i] = min;
			st = en + 1;
		}
		
		return d;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, double[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		TCO2018_R2B_L1_SubarrayAverages obj;
		double[] answer;
		obj = new TCO2018_R2B_L1_SubarrayAverages();
		long startTime = System.currentTimeMillis();
		answer = obj.findBest(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (Math.abs(p1[i] - answer[i]) > 1e-9 * Math.max(1.0, Math.abs(p1[i]))) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		double[] p1;
		
		// ----- test 0 -----
		p0 = new int[]{1,2,3,4,5,6,7,8,9};
		p1 = new double[]{1.0D,2.0D,3.0D,4.0D,5.0D,6.0D,7.0D,8.0D,9.0D};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{7,6,5,4,3,2,1};
		p1 = new double[]{4.0D,4.0D,4.0D,4.0D,4.0D,4.0D,4.0D};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,2,1,2};
		p1 = new double[]{1.0D,1.5D,1.5D,2.0D};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,10,1,1,1,1,10};
		p1 = new double[]{1.0D,2.8D,2.8D,2.8D,2.8D,2.8D,10.0D};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
		p1 = new double[]{4.0D,5.0D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D,5.846153846153846D};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1000000};
		p1 = new double[]{1000000.0D};
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{9450,7098,6048,1050,672,8232,5028,672,672,42,42,42,42,42,9450,6048,3402,3402,2688,9450,7098,6048,1050,672,8232,5028,672,672,9450,6048,3402};
		p1 = new double[]{2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,2795.1428571428573D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,4565.142857142857D,6300.0D,6300.0D,6300.0D};
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{7,6,5,4,3,2,1,4,4};
		p1 = new double[]{4.0D,4.0D,4.0D,4.0D,4.0D,4.0D,4.0D,4.0D,4.0D};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
