package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM625_Div1_L1_PalindromePermutations
{
	public double palindromeProbability(String word)
	{
		int n = word.length();
		boolean isEven = (n % 2 == 0);
		int[] a = new int[27];
		for (char c : word.toCharArray())
			a[c-'a']++;
		
		int odd=0;
		for (int i = 0; i < 26; i++)
			if (a[i] > 0 && a[i]%2 == 1) odd++;
		
		if (isEven && odd > 0)
			return 0;
		else if (!isEven && odd != 1)
			return 0;
						
		double den = fact(n);
		for (int i = 0; i < 26; i++)
			if (a[i] > 0) den /= fact(a[i]);
		//System.out.println(den);
		
		double num = fact(n/2);
		for (int i = 0; i < 26; i++)
			if (a[i] > 1) num /= fact(a[i]/2);
		//System.out.println(num);
		
		return num / den;
	}
	
	private double fact(int f)
	{
		double fac = 1.0;
		for (int i = 1; i <= f; i++)
			fac *= i;
		return fac;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, double p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		SRM625_Div1_L1_PalindromePermutations obj;
		double answer;
		obj = new SRM625_Div1_L1_PalindromePermutations();
		long startTime = System.currentTimeMillis();
		answer = obj.palindromeProbability(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		double p1;
		
		// ----- test 0 -----
		p0 = "hhhfffaaa";
		p1 = 0.0;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = "hhhffaa";
		p1 = 0.02857142857142857D;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "aaaaaaaaaaaaaaaaaaaaaaabbzzzzzzzzzzzzzzzzzzzzzzzz";
		p1 = 1.7113475371746433E-9D;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwyyy";
		p1 = 0.0;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = "haha";
		p1 = 0.3333333333333333D;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "xxxxy";
		p1 = 0.2D;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "xxxx";
		p1 = 1.0D;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "abcde";
		p1 = 0.0D;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhff";
		p1 = 0.025641025641025637D;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
