package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM670_Div2_L2_Drbalance
{
	public int lesscng(String s, int k)
	{
		int n = s.length();
		int minus = 0;
		ArrayList<Integer> al = new ArrayList<Integer>();
		for (int i = 0; i < n; i++)
			if (s.charAt(i) == '-')
			{
				minus++;
				al.add(i);
			}
		char[] c = s.toCharArray();
		
		String st = new String(c);
		int bal = getBal(st);		
		int cnt = 0;
		for (int j = 1; j <= n; j++)
		{
			bal = getBal(st.substring(0,j));
			if (bal < 0) cnt++;				
		}
		if (cnt <= k)
			return 0;
		
		for (int i = 0; i < minus; i++)
		{
			c[al.get(i)] = '+';
			st = new String(c);
			cnt = 0;
			for (int j = 1; j <= n; j++)
			{
				bal = getBal(st.substring(0,j));
				if (bal < 0) cnt++;				
			}
			if (cnt <= k)
				return (i+1);
		}
		return minus;
	}
	
	int getBal(String s)
	{		
		int bal = 0;
		for (char c : s.toCharArray())
		{
			if (c == '+') bal++;
			else bal--;		
		}
		return bal;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + p1);
		System.out.println("]");
		SRM670_Div2_L2_Drbalance obj;
		int answer;
		obj = new SRM670_Div2_L2_Drbalance();
		long startTime = System.currentTimeMillis();
		answer = obj.lesscng(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = "-";
		p1 = 0;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = "----";
		p1 = 4;
		p2 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = "+++";
		p1 = 0;
		p2 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = "---";
		p1 = 1;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "+-+-";
		p1 = 0;
		p2 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "-+-+---";
		p1 = 2;
		p2 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "-------++";
		p1 = 3;
		p2 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "-+--+--+--++++----+";
		p1 = 3;
		p2 = 2;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
