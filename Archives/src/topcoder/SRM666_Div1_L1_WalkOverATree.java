package topcoder;
import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;

//Someone else's solution
public class SRM666_Div1_L1_WalkOverATree
{
	ArrayList<ArrayList<Integer>> graph;
	int L;
	
	public int maxNodesVisited(int[] parent, int L)
	{
		int n = parent.length + 1;
		graph = new ArrayList<ArrayList<Integer>>();
		this.L = L;
		for (int i = 0; i < n; i++) graph.add(new ArrayList<Integer>());
		for (int i = 0; i < n-1; i++) {
			graph.get( parent[i] ).add(i+1);
		}
		return dfs(0, new ArrayList<Integer>() );
	}
	public int dfs (int v, ArrayList<Integer> vs) {
		int ans = 0;
		{
			boolean[] vis = new boolean[graph.size()];
			for (int x : vs) {
				vis[x] = true;
			}
			vis[v] = true;
			LinkedList<Integer> queue = new LinkedList<Integer>();
			for (int x : vs) {
				for (int y : graph.get(x)) {
					if (!vis[y]) queue.add(y);
				}
			}
			for (int y : graph.get(v) ) {
				queue.add(y);
			}
			int lim = L - vs.size();
			int score = vs.size() + 1;
			while (!queue.isEmpty() && lim >= 2) {
				int w = queue.poll();
				if (vis[w] ) continue;
				vis[w] = true;
				score += 1;
				for (int y : graph.get(w)) {
					if (!vis[y]) queue.add(y);
				}
				lim -= 2;
			}
			ans = score;			
		}
		if (vs.size() < L) {
			for (int w : graph.get(v)) {
				vs.add(v);
				ans = Math.max(ans, dfs(w,vs));
				vs.remove(vs.size() - 1);
			}
		}
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		SRM666_Div1_L1_WalkOverATree obj;
		int answer;
		obj = new SRM666_Div1_L1_WalkOverATree();
		long startTime = System.currentTimeMillis();
		answer = obj.maxNodesVisited(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{};
		p1 = 1;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new int[]{0,0};
		p1 = 2;
		p2 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{0,0};
		p1 = 3;
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,1,2,3};
		p1 = 2;
		p2 = 3;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,0,0,0,2,4,2,3,1};
		p1 = 1;
		p2 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{0,0,1,2,3,2,3,1,3,0,1,8,6,8,0,5,15,0,9};
		p1 = 4;
		p2 = 5;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{0,0,0,1,1,3,5,1,4,5,2,2,10,5,10,10,11,13,8,3,18,15,20,20,23,8,11,26,4};
		p1 = 26;
		p2 = 17;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{0,0,2,0};
		p1 = 100;
		p2 = 5;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = new int[]{0,0,2};
		p1 = 4;
		p2 = 4;
		all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
