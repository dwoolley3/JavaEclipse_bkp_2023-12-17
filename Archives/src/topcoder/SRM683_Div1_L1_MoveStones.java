package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM683_Div1_L1_MoveStones
{
	public long get(int[] a, int[] b)
	{
		long best = Long.MAX_VALUE;
		int n = a.length;
		for (int i = 0; i < n; i++) 
		{
			long sum = 0, ans = 0;

			for (int j = 0; j < n; j++)
			{
				int k = (i+j) % n;
				sum += a[k];
				sum -= b[k];
				ans += Math.abs(sum);
			}
			if (sum != 0) return -1;
			
			best = Math.min(ans, best);
		}
		return best;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM683_Div1_L1_MoveStones obj;
		long answer;
		obj = new SRM683_Div1_L1_MoveStones();
		long startTime = System.currentTimeMillis();
		answer = obj.get(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		long p2;
		
		// ----- test 0a ----- ***  prob if + first, then -
		p0 = new int[]{2,0,2,0,0};
		p1 = new int[]{0,2,0,2,0};
		p2 = 4L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0b ----- **  prob if - first, then +
		p0 = new int[]{2,0,2,0,0};
		p1 = new int[]{0,2,0,0,2};
		p2 = 4L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
				
		// ----- test 1b -----
		p0 = new int[]{2,0,0,0,0,0,0,2,0};
		p1 = new int[]{0,0,0,2,0,0,0,0,2};
		p2 = 8L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1c ----- ***
		p0 = new int[]{2,0,0,0,0,0,2,0,0};
		p1 = new int[]{0,0,0,2,0,0,0,2,0};
		p2 = 8L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1d ----- **
		p0 = new int[]{2,0,0,0,0,0,2,0,0};
		p1 = new int[]{0,0,0,2,0,0,0,0,2};
		p2 = 8L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{5,0,0,0,0,1,1};
		p1 = new int[]{0,0,4,0,0,2,1};
		p2 = 10L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{3,0,0,1,0};
		p1 = new int[]{0,2,0,0,2};
		p2 = 4L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{3,1,2};
		p1 = new int[]{1,2,3};
		p2 = 2L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = new int[]{12};
		p1 = new int[]{12};
		p2 = 0L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{10};
		p1 = new int[]{9};
		p2 = -1L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{0,5};
		p1 = new int[]{5,0};
		p2 = 5L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3};
		p1 = new int[]{3,1,2};
		p2 = 2L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,0,1,1,0};
		p1 = new int[]{0,3,0,0,0};
		p2 = 4L;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1000000000,0,0,0,0,0};
		p1 = new int[]{0,0,0,1000000000,0,0};
		p2 = 3000000000L;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
