package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM733_Div2_L1_MinimizeAbsoluteDifferenceDiv2
{
	public int[] findTriple(int x0, int x1, int x2)
	{
		int t[] = new int[] {x0, x1, x2};
		double min = Double.MAX_VALUE;
		int i2 = 0, j2 = 0, k2 = 0;
		
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++)
				for (int k = 0; k < 3; k++)
					if (i == j || j == k || i == k) 
						continue;
					else
					{
						double v = val(t[i],t[j],t[k]);
						if (v < min) {
							i2 = i;
							j2 = j;
							k2 = k;		
							min = v;
						}
					}
		int ans[] = new int[] {i2, j2, k2};
		return ans;
	}
	
	double val(int x0, int x1, int x2)
	{
		return Math.abs((x0 * 1.0 / x1) - x2);		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int[] p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		SRM733_Div2_L1_MinimizeAbsoluteDifferenceDiv2 obj;
		int[] answer;
		obj = new SRM733_Div2_L1_MinimizeAbsoluteDifferenceDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.findTriple(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p3.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p3[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p3.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p3[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int[] p3;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 1;
		p2 = 1;
		p3 = new int[]{0,1,2};
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 1;
		p1 = 2;
		p2 = 3;
		p3 = new int[]{1,2,0};
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 7;
		p1 = 20;
		p2 = 5;
		p3 = new int[]{1,0,2};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 6;
		p1 = 2;
		p2 = 3;
		p3 = new int[]{0,1,2};
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 10;
		p1 = 11;
		p2 = 111;
		p3 = new int[]{2,1,0};
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 10000;
		p1 = 1;
		p2 = 10000;
		p3 = new int[]{0,1,2};
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
