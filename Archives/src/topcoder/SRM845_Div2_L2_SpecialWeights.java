package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM845_Div2_L2_SpecialWeights
{
	public long solve(int N, long[] W, long K)
	{
		if (K > (1L << N)) return -1;
		K--;
		long ans = 0;
		int i = 0;
		while (K > 0) {
			if (K % 2 == 1) {
				ans += W[i];
			}
			K /= 2;
			i++;
		}
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, long[] p1, long p2, boolean hasAnswer, long p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		SRM845_Div2_L2_SpecialWeights obj;
		long answer;
		obj = new SRM845_Div2_L2_SpecialWeights();
		long startTime = System.currentTimeMillis();
		answer = obj.solve(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		long[] p1;
		long p2;
		long p3;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = new long[]{4L,7L};
		p2 = 1L;
		p3 = 0L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = new long[]{4L,7L};
		p2 = 4L;
		p3 = 11L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 2;
		p1 = new long[]{4L,7L};
		p2 = 5L;
		p3 = -1L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 5;
		p1 = new long[]{1L,3L,7L,13L,30L};
		p2 = 10L;
		p3 = 14L;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 5;
		p1 = new long[]{100000000000L,300000000000L,700000000000L,1300000000000L,3000000000000L};
		p2 = 10L;
		p3 = 1400000000000L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = new long[]{4L};
		p2 = 2L;
		p3 = 4L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = new long[]{4L};
		p2 = 3L;
		p3 = -1L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 5;
		p1 = new long[]{100000000000L,300000000000L,700000000000L,1300000000000L,3000000000000L};
		p2 = 1L;
		p3 = 0L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
