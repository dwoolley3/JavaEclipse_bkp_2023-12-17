package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM498_Div2_L2_FoxSequence
{
	public String isValid(int[] seq)
	{
        int N = seq.length;
        int a, b, c, d;
        for (a = 1; a < N-1; a++)
            for (b = a+1; b < N-1; b++)
                for (c = b; c < N - 1; c++)
                    for (d = c+1; d < N-1; d++)
                    {
                        if (!(a < b || b <=c || c < d)) continue;

                        int dif = seq[1] - seq[0];
                        if (dif < 1) continue;
                        boolean ok = true;
                        for (int i = 1; i < a; i++)
                            if (seq[i + 1] - seq[i] != dif) ok = false;
                        if (!ok) continue;

                        dif = seq[a + 1] - seq[a];
                        if (dif >= 0) continue;
                        ok = true;
                        for (int i = a+1; i < b; i++)
                            if (seq[i + 1] - seq[i] != dif) ok=false;
                        if (!ok) continue;

                        ok = true;
                        for (int i = b; i < c; i++)
                            if (seq[i] != seq[i + 1]) ok=false;
                        if (!ok) continue;

                        dif = seq[c+1] - seq[c];
                        if (dif < 1) continue;
                        ok = true;
                        for (int i = c+1; i < d; i++)
                            if (seq[i + 1] - seq[i] != dif) ok = false;
                        if (!ok) continue;
                        
                        dif = seq[d + 1] - seq[d];
                        if (dif >= 0) continue;
                        ok = true;
                        for (int i = d + 1; i < N - 1; i++)
                            if (seq[i + 1] - seq[i] != dif) ok=false;
                        if (!ok) continue;

                        return "YES";                
                }
        return "NO";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM498_Div2_L2_FoxSequence obj;
		String answer;
		obj = new SRM498_Div2_L2_FoxSequence();
		long startTime = System.currentTimeMillis();
		answer = obj.isValid(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String p1;
		
		// ----- test 0 -----
		p0 = new int[]{1,3,5,7,5,3,1,1,1,3,5,7,5,3,1};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,2,3,4,5,4,3,2,2,2,3,4,5,6,4};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{3,6,9,1,9,5,1};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3,2,1,2,3,2,1,2,3,2,1};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,3,4,3,1,1,1,1,3,4,3,1};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{6,1,6};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
