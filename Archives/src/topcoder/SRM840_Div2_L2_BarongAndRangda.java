package topcoder;

//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM840_Div2_L2_BarongAndRangda
{
	public String compare(int B1, int R1, int B2, int R2)
	{
		String INCORRECT= "incorrect";
		String CORRECT = "correct";
		String UNKNOWN = "unknown";

		if (B1 >= B2 && R1 > R2) return CORRECT;
		if (B1 > B2 + R2) return CORRECT;		
		if (B1 == B2 + R2 && R2 > 0) return CORRECT;
		if (B1 + R1 == B2 + R2 && B1 > B2) return CORRECT;
		
		if (B1 <= B2 && R1 <= R2) return INCORRECT;
		if (R1 == R2 + B2 && B2 > 0) return INCORRECT;
		return UNKNOWN;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, String p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		SRM840_Div2_L2_BarongAndRangda obj;
		String answer;
		obj = new SRM840_Div2_L2_BarongAndRangda();
		long startTime = System.currentTimeMillis();
		answer = obj.compare(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p4 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p4);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		String p4;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 0;
		p2 = 0;
		p3 = 1;
		p4 = "correct";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 0;
		p1 = 1;
		p2 = 1;
		p3 = 0;
		p4 = "incorrect";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 0;
		p1 = 0;
		p2 = 0;
		p3 = 0;
		p4 = "incorrect";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 4;
		p1 = 7;
		p2 = 1;
		p3 = 1;
		p4 = "correct";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 9;
		p1 = 0;
		p2 = 0;
		p3 = 10;
		p4 = "unknown";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 1;
		p1 = 1;
		p2 = 1;
		p3 = 0;
		p4 = "correct";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 2;
		p1 = 1;
		p2 = 1;
		p3 = 2;
		p4 = "correct";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		
		// ----- test 4 -----
		p0 = 2;
		p1 = 1;
		p2 = 1;
		p3 = 3;
		p4 = "unknown";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
