package topcoder;
//import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM523_Div2_L1_AlphabetPath
{
	public String doesItExist(String[] lm)
	{
        //lm = letterMaze
        int r = lm.length - 1;
        int c = lm[0].length() - 1;
        int rr, cc;
        for (int i = 0; i <= r; i++)
            for (int j=0; j <= c; j++)
                if (lm[i].charAt(j) == 'A')
                {
                    rr = i; cc = j;
                    for (char ch = 'B'; ch <= 'Z'; ch++)
                        if (rr + 1 <= r && lm[rr + 1].charAt(cc) == ch)
                            rr++;
                        else if (rr - 1 >= 0 && lm[rr - 1].charAt(cc) == ch)
                            rr--;
                        else if (cc + 1 <= c && lm[rr].charAt(cc + 1) == ch)
                            cc++;
                        else if (cc - 1 >= 0 && lm[rr].charAt(cc - 1) == ch)
                            cc--;
                        else
                            return "NO";
                }
        return "YES";   
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		SRM523_Div2_L1_AlphabetPath obj;
		String answer;
		obj = new SRM523_Div2_L1_AlphabetPath();
		long startTime = System.currentTimeMillis();
		answer = obj.doesItExist(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String p1;
		
		// ----- test 0 -----
		p0 = new String[]{"ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"ADEHI..Z","BCFGJK.Y",".PONML.X",".QRSTUVW"};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"ACBDEFGHIJKLMNOPQRSTUVWXYZ"};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"ABC.......","...DEFGHIJ","TSRQPONMLK","UVWXYZ...."};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"..............","..............","..............","...DEFGHIJK...","...C......L...","...B......M...","...A......N...","..........O...","..ZY..TSRQP...","...XWVU.......",".............."};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
