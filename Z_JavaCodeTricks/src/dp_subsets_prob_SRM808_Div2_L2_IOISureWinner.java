


public class dp_subsets_prob_SRM808_Div2_L2_IOISureWinner
{
	// yaroslaffb's solution
	public double probability(int scoreNeeded, int[] subtasks, int[] p)
	{
		double[] dp = new double[303];
		dp[0] = 1.0;
		for (int i = 0; i < subtasks.length; i++) {
			for (int j = 303 - subtasks[i] - 1; j >= 0; j--) {
				dp[j + subtasks[i]] += dp[j] * (p[i] / 100.0);
				dp[j] *= (1 - (p[i] / 100.00));
			}
		}
		double res = 0;
		for (int i = scoreNeeded; i < 303; i++) {
			res += dp[i];
		}		
		return res;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, boolean hasAnswer, double p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}");
		System.out.println("]");
		dp_subsets_prob_SRM808_Div2_L2_IOISureWinner obj;
		double answer;
		obj = new dp_subsets_prob_SRM808_Div2_L2_IOISureWinner();
		long startTime = System.currentTimeMillis();
		answer = obj.probability(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p3 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p3));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int[] p2;
		double p3;
		
		// ----- test 0 -----
		p0 = 31;
		p1 = new int[]{10,10,10,10};
		p2 = new int[]{50,50,50,50};
		p3 = 0.0625D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 40;
		p1 = new int[]{10,10,10,10};
		p2 = new int[]{50,50,50,50};
		p3 = 0.0625D;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 101;
		p1 = new int[]{10,20,30,40};
		p2 = new int[]{99,98,97,96};
		p3 = 0.0D;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 100;
		p1 = new int[]{20,30,100,50};
		p2 = new int[]{12,34,56,78};
		p3 = 0.57400256D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 20;
		p1 = new int[]{10,11,12,13,14};
		p2 = new int[]{10,10,10,10,10};
		p3 = 0.08146000000000005D;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100;
		p1 = new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3};
		p2 = new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,99,100};
		p3 = 0.049915173317132105D;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
