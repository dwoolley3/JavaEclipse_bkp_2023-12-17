import java.util.*;
//import java.util.regex.*;
//import java.text.*;
//import java.math.*;


public class SRM851_Div2_L2_ANewFence
{
	public int build(int[] wood)
	{
		int n = wood.length;
		HashMap<Integer,Integer> hm = new HashMap<>();
		for (int i = 0; i < n; i++) {
			int w = wood[i];
			if (hm.get(w) == null) {
				hm.put(w,1);
			} else {
				hm.put(w, hm.get(w)+1);
			}
		}
		int[] wo = new int[n+1];
		for (int i = 0; i < n; i++) wo[i] = wood[i];
		wo[n] = 0;

		int max = 1;
		for (int i = 0; i < n; i++) {
			boolean[] used = new boolean[n];
			int w = hm.get(wood[i]);
			for (int j = 0; j < n; j++) {				
				for (int k = j+1; k < n; k++) {
					if (wood[j]+wood[k] == wood[i] && !used[j] && !used[k]) {
						w++;
						used[j] = true;
						used[k] = true;
						break;
					}
				}
			}
			if (w > max) {
				max = w;
			}
		}
		
		return max;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM851_Div2_L2_ANewFence obj;
		int answer;
		obj = new SRM851_Div2_L2_ANewFence();
		long startTime = System.currentTimeMillis();
		answer = obj.build(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{10,10,10,10,4,10,7,10};
		p1 = 6;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{10,10,10,10,4,10,6,10};
		p1 = 7;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{10,10,10,10,3,10,3,4,10};
		p1 = 6;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3,4,5,6,7,8,9,10};
		p1 = 5;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{10,110,100,100,10};
		p1 = 3;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{10,24,47,193,558};
		p1 = 1;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{5,5,10};
		p1 = 2;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = new int[]{3,7,8,2,4,6,5,5,5,5};
		p1 = 5;
		all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
