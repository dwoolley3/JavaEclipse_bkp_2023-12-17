package topcoder;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SRM765_Div2_L1_MilkConsumption_orig
{
	public int[] findMaxRegion(int[] population, int[] totalConsumption)
	{
		int n = population.length;
		double[] ave = new double[n];
		int[] ind = new int[n]; 
		for (int i = 0; i < n; i++) {
			ave[i] = 1.0 * totalConsumption[i] / population[i];	
			ind[i] = i;
		}
		
		int t = 0;
		for (int i = 0; i < n-1; i++) 
			for (int j = i+1; j < n; j++) {
				if (ave[i] < ave[j]) {
					double ta = ave[i]; ave[i] = ave[j]; ave[j] = ta;
					t = totalConsumption[i]; totalConsumption[i] = totalConsumption[j];
					totalConsumption[j] = t;
					t = population[i]; population[i] = population[j];
					population[j] = t;
					t = ind[i]; ind[i] = ind[j]; ind[j] = t;
				}
			}
		int[] ans = new int[1];
		ans[0] = ind[0]; 
		return ans;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SRM765_Div2_L1_MilkConsumption_orig obj;
		int[] answer;
		obj = new SRM765_Div2_L1_MilkConsumption_orig();
		long startTime = System.currentTimeMillis();
		answer = obj.findMaxRegion(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int[] p2;
		
		// ----- test 0 -----
		p0 = new int[]{10,10,10,10};
		p1 = new int[]{47,47,47,47};
		p2 = new int[]{2,3,0};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1234567,2345678,3456789,4567890};
		p1 = new int[]{2345678,3456789,4567890,5678901};
		p2 = new int[]{0};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{98,120,40,135,40};
		p1 = new int[]{4606,5167,1880,1351,1879};
		p2 = new int[]{0,2};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{9227465,14930352};
		p1 = new int[]{5702887,9227465};
		p2 = new int[]{1};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
